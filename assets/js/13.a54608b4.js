(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{377:function(t,a,s){"use strict";s.r(a);var n=s(43),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"chapter-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chapter-4"}},[t._v("#")]),t._v(" Chapter 4")]),t._v(" "),s("p",[t._v("Among all operations that you can execute in a smart contract, arithmetic operations are probably the most common ones, but also the simplest ones. After all, computers in general were created to provide an easy way to do arithmetic operations that started to become too complex.")]),t._v(" "),s("p",[t._v("Within your smart contract, you may want to add or subtract tokens to the balance of your users or you may want to multiply or divide different values. As you will understand it when reading what follows, it will be extremely easy in Michelson. You only have two conditions to remember before trying any operation: first, you must make sure that you have two elements on top of the stack. Second, you must verify that these two elements are of comparable types and of types that work together.")]),t._v(" "),s("p",[t._v("Unlike programming languages that you may already be familiar with, Michelson doesn't use arithmetic operators you know like "),s("strong",[t._v("+")]),t._v(", "),s("strong",[t._v("-")]),t._v(", "),s("strong",[t._v("*")]),t._v(" or "),s("strong",[t._v("/")]),t._v('. Everything is "instruction-based" and you will have to use instructions that modify the stack to make operations.')]),t._v(" "),s("h2",{attrs:{id:"available-types-for-arithmetic-operations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#available-types-for-arithmetic-operations"}},[t._v("#")]),t._v(" Available types for arithmetic operations")]),t._v(" "),s("p",[t._v("As you may have already guessed, Michelson allows us to work with "),s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("nat")]),t._v(" for arithmetic operations. An operation of two "),s("code",[t._v("int")]),t._v(" will yield an "),s("code",[t._v("int")]),t._v(" and an operation of two"),s("code",[t._v("nat")]),t._v(" will yield a "),s("code",[t._v("nat")]),t._v(". These two types can be used together for addition, subtraction, multiplication and division but as long there is an "),s("code",[t._v("int")]),t._v(" in your operation, the result will also be an "),s("code",[t._v("int")]),t._v(". For example, "),s("code",[t._v("int + nat = int")]),t._v(".")]),t._v(" "),s("p",[t._v("In addition to "),s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("nat")]),t._v(", you can use other types for arithmetic operations, for example "),s("code",[t._v("mutez")]),t._v(" and "),s("code",[t._v("timestamp")]),t._v(". Here is a table that sums up all the possible combinations and the type of the result:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("Value type")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Available operation")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Value type")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Result type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ADD/SUB/MUL/EDIV")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("nat")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ADD/SUB/MUL/EDIV")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("nat")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ADD/SUB/MUL/EDIV")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("nat")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ADD/SUB")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SUB")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("mutez")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ADD/SUB")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("mutez")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("mutez")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("mutez")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("MUL/EDIV")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("nat")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("mutez")])])])]),t._v(" "),s("p",[t._v("A few considerations to keep in mind regarding the table above:")]),t._v(" "),s("ul",[s("li",[t._v("Be always very mindful about the return type when you put "),s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("nat")]),t._v(" together. You may spend some time scratching your head and wondering why you are not getting the type you are expecting because you overlooked the types you are using in your operation.")]),t._v(" "),s("li",[t._v("A few operations are available for types outside of "),s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("nat")]),t._v(", but they are somehow limited (for logical reasons). For example, it wouldn't make any sense to multiply timestamps with other values or multiply "),s("code",[t._v("mutez")]),t._v(" together.")]),t._v(" "),s("li",[t._v("Other limitations are set in place for safety purposes: limiting the possible operations on "),s("code",[t._v("mutez")]),t._v(" prevents negative balances or integer overflow.")])]),t._v(" "),s("h2",{attrs:{id:"the-add-instruction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-add-instruction"}},[t._v("#")]),t._v(" The "),s("strong",[s("code",[t._v("ADD")])]),t._v(" instruction")]),t._v(" "),s("p",[t._v("The first instruction we are going to play with is the "),s("strong",[s("code",[t._v("ADD")])]),t._v(" instruction. As its name suggests, it takes two values and add them together. If you refer to the table above, you can observe that it is one of the most widely available instruction throughout the different types. "),s("strong",[s("code",[t._v("ADD")])]),t._v(" also allows you to use different types of values, keeping in mind that the return type is always fix.")]),t._v(" "),s("p",[t._v("Let's check some examples and see how it works:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token comment"},[t._v("## We quickly initialize a contract environment to manipulate different values on the stack")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token keyword"},[t._v("storage")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("unit")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token keyword"},[t._v("parameter")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("unit")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token keyword"},[t._v("BEGIN")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("Unit")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("Unit")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("storage unit;\nparameter unit;\nBEGIN: use %default; drop all; push (Unit, Unit);\nDROP: pop (Unit, Unit);")])]),t._v(" "),s("p",[t._v("In this first example, we push 2 "),s("code",[t._v("int")]),t._v(" on to the stack and add them."),s("br"),t._v("\nAs you can see, the return value is of type "),s("code",[t._v("int")]),t._v(" and is the result of "),s("code",[t._v("5 + 5")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ADD")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("PUSH: push 5;\nPUSH: push 5;\nADD: pop 5, 5; push 10;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("10")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),s("p",[t._v("Now we have a value of type "),s("code",[t._v("int")]),t._v(" on top of the stack. Let's push a value of type "),s("code",[t._v("nat")]),t._v(" and see what happens:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ADD")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("PUSH: push 5;\nADD: pop 5, 10; push 15;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("15")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),s("p",[t._v("As expected, "),s("code",[t._v("int 10 + nat 5")]),t._v(" equals "),s("code",[t._v("int 15")]),t._v(". The addition of "),s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("nat")]),t._v(" always yields an "),s("code",[t._v("int")]),t._v(" ("),s("em",[t._v("for logical reasons, the result of something like "),s("code",[t._v("int -20 + nat 5")]),t._v(" cannot be a "),s("code",[t._v("nat")]),t._v(" value")]),t._v(").")]),t._v(" "),s("p",[t._v("In the next snippet, you will see a new instruction, "),s("strong",[s("code",[t._v("NOW")])]),t._v(". We will come back to it in a later chapter, just know for now that it pushes the current timestamp on top of the stack. We can then use the timestamp to demonstrate how "),s("strong",[s("code",[t._v("ADD")])]),t._v(" works with values of this type:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("NOW")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ADD")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("NOW: push 1592111017;\nADD: pop 1592111017, 15; push 1592111032;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                          ")]),s("th",[t._v("type                                          ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("1592111032")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("timestamp")])])])])])]),t._v(" "),s("p",[t._v("According to the day and time you are running this code block, the timestamp will be different. However, you should clearly see that the initial value has been incremented with "),s("code",[t._v("15")]),t._v(", which was the value we had in our stack when we pushed the timestamp. You can also push a value and add it to the existing timestamp:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("500")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ADD")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("PUSH: push 500;\nADD: pop 500, 1592111032; push 1592111532;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                          ")]),s("th",[t._v("type                                          ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("1592111532")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("timestamp")])])])])])]),t._v(" "),s("p",[t._v("Let's clean our stack and see how adding "),s("code",[t._v("mutez")]),t._v(" together works. As in the previous examples, we just push two values on top of the stack and add them. This yields a result in "),s("code",[t._v("mutez")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("mutez")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("50")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("mutez")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("20")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ADD")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 1592111532;\nPUSH: push 50;\nPUSH: push 20;\nADD: pop 20, 50; push 70;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                      ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("70")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("mutez")])])])])])]),t._v(" "),s("p",[t._v("Keep in mind that "),s("code",[t._v("mutez")]),t._v(" values are NOT tezzies but a "),s("em",[t._v("representation")]),t._v(" of their value. When writing "),s("code",[t._v("PUSH mutez 50")]),t._v(", you are not manipulating tezzies, only their representation. There are specific instructions we will study later that tell the contract to send actual tezzies.")]),t._v(" "),s("h2",{attrs:{id:"the-sub-instruction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-sub-instruction"}},[t._v("#")]),t._v(" The "),s("strong",[s("code",[t._v("SUB")])]),t._v(" instruction")]),t._v(" "),s("p",[t._v("After adding different amounts comes a time when you have to subtract 😅 The "),s("strong",[s("code",[t._v("SUB")])]),t._v(" instruction works very similarly to the "),s("strong",[s("code",[t._v("ADD")])]),t._v(" instruction outside of a few exceptions we are going to study here.")]),t._v(" "),s("p",[t._v("First, let's start with a simple example:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token comment"},[t._v("## let's start with a clean stack")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SUB")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 70;\nPUSH: push 3;\nPUSH: push 5;\nSUB: pop 5, 3; push 2;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                 ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("2")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),s("p",[t._v("In this example, you can see that we push "),s("code",[t._v("3")]),t._v(" to the stack, then "),s("code",[t._v("5")]),t._v(" before subtracting "),s("code",[t._v("3")]),t._v(" from "),s("code",[t._v("5")]),t._v("."),s("br"),t._v("\nIn a subtraction, the order of the elements is essential, this is why you have to remember the right order of the elements in the stack: "),s("code",[t._v("5 - 3")]),t._v(" is not going to yield the same result as "),s("code",[t._v("3 - 5")]),t._v("!"),s("br"),t._v("\nLet's see what would happen if we push the values in the reverse order:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SUB")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 2;\nPUSH: push 5;\nPUSH: push 3;\nSUB: pop 3, 5; push -2;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("-2")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),s("p",[t._v("As you can see, you get now "),s("code",[t._v("-2")]),t._v(". This may be what you want, as integers can have negative values.")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("SUB")])]),t._v(" is going to work a little differently for "),s("code",[t._v("nat")]),t._v(" values:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SUB")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token attr-name"},[t._v("@first_value")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SUB")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token attr-name"},[t._v("@second_value")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token keyword"},[t._v("DUMP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop -2;\nPUSH: push 5;\nPUSH: push 3;\nSUB: pop 3, 5; push -2;\nPUSH: push 3;\nPUSH: push 5;\nSUB: pop 5, 3; push 2;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                    ")]),s("th",[t._v("name                                              ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("2")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("@second_value")])])]),t._v(" "),s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("-2")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("@first_value")])])])])])]),t._v(" "),s("p",[t._v("Something very interesting happens here, can you spot it? We started with "),s("code",[t._v("nat")]),t._v(" values and we end up with "),s("code",[t._v("int")]),t._v(" values! The result of the subtraction of 2 "),s("code",[t._v("nat")]),t._v(" values is always an "),s("code",[t._v("int")]),t._v(" as there is a possibility for a negative number. Now, an "),s("code",[t._v("int")]),t._v(" value may not be what you want. Maybe you are updating a "),s("code",[t._v("nat")]),t._v(" value in your storage and you need a "),s("code",[t._v("nat")]),t._v(" value to put it back in the storage. In this case, you can use the "),s("strong",[s("code",[t._v("ABS")])]),t._v(" instruction. "),s("strong",[s("code",[t._v("ABS")])]),t._v(" turns an "),s("code",[t._v("int")]),t._v(" value into a "),s("code",[t._v("nat")]),t._v(" value. As usual, make sure that the top element of the stack is of type "),s("code",[t._v("int")]),t._v(" before using it:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("ABS")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token attr-name"},[t._v("@second_value")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SWAP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ABS")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token attr-name"},[t._v("@first_value")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token keyword"},[t._v("DUMP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("ABS: pop 2; push 2;\nSWAP: pop 2, -2; push 2; push -2;\nABS: pop -2; push 2;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                 ")]),s("th",[t._v("type                                    ")]),s("th",[t._v("name                                              ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("2")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("@first_value")])])]),t._v(" "),s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("2")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("@second_value")])])])])])]),t._v(" "),s("p",[t._v("You can also use "),s("strong",[s("code",[t._v("SUB")])]),t._v(" with timestamps. In this case, you can only subtract "),s("code",[t._v("int")]),t._v(" values from timestamps that represent the number of seconds to subtract, for example:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token comment"},[t._v("## DROP_ALL is a non-Michelson instruction used in these notebooks to reset the stack to zero")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("100")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("NOW")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SUB")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP_ALL: drop all;\nPUSH: push 100;\nNOW: push 1592111022;\nSUB: pop 1592111022, 100; push 1592110922;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                          ")]),s("th",[t._v("type                                          ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("1592110922")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("timestamp")])])])])])]),t._v(" "),s("p",[t._v("In the steps of the execution, you can observe that the current timestamp is pushed onto the stack before "),s("code",[t._v("100")]),t._v(" is subtracted from it."),s("br"),t._v("\nIf you wish, you can also subtract one timestamp from another to get the difference in seconds between both of them:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("100")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("NOW")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SUB")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("NOW")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SUB")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 1592110922;\nPUSH: push 100;\nNOW: push 1592111024;\nSUB: pop 1592111024, 100; push 1592110924;\nNOW: push 1592111024;\nSUB: pop 1592111024, 1592110924; push 100;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                   ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("100")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),s("p",[t._v("In a first time, we push "),s("code",[t._v("int 100")]),t._v(" onto the stack, then the current timestamp and we subtract "),s("code",[t._v("100")]),t._v(" from the timestamp. Next, we push another timestamp onto the stack and subtract the first created timestamp from the second one. The result should be "),s("code",[t._v("100")]),t._v(" because the operation is so fast the timestamp doesn't really have time to update the second time we push it.")]),t._v(" "),s("p",[t._v("As you would expect, it is also possible to subtract mutez from one another to get the difference between the two amounts:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("mutez")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("25")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("mutez")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("50")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SUB")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 100;\nPUSH: push 25;\nPUSH: push 50;\nSUB: pop 50, 25; push 25;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                      ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("25")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("mutez")])])])])])]),t._v(" "),s("p",[t._v("Once again, be careful of the order you push the elements onto the stack, for safety purposes, negative amounts of "),s("code",[t._v("mutez")]),t._v(" are not allowed and the contract will fail if it happens:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("mutez")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("50")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("mutez")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("25")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("SUB")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 25;\nPUSH: push 50;\nPUSH: push 25;\nSUB: pop 25, 50;")])]),t._v(" "),s("div",{staticClass:"stderr"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stderr")]),s("br"),t._v("MichelsonRuntimeError: expected non-negative val\nat SUB")])]),t._v(" "),s("h2",{attrs:{id:"the-mul-instruction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-mul-instruction"}},[t._v("#")]),t._v(" The "),s("strong",[s("code",[t._v("MUL")])]),t._v(" instruction")]),t._v(" "),s("p",[t._v("Multiplications are far less common throughout Michelson types than addition or subtraction. For timestamps, they just don't make sense. For "),s("code",[t._v("mutez")]),t._v(", they are possible only under a certain condition. You can use it for "),s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("nat")]),t._v(" values. The syntax is the same as addition and subtraction and this time, you can relax about the order of the elements 😊")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("4")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("MUL")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 25;\nPUSH: push 5;\nPUSH: push 4;\nMUL: pop 4, 5; push 20;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("20")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("10")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("MUL")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 20;\nPUSH: push 3;\nPUSH: push 10;\nMUL: pop 10, 3; push 30;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("30")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])])])])])]),t._v(" "),s("p",[t._v("As it is also the case for addition and subtraction, the multiplication of "),s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("nat")]),t._v(" values together yields a new "),s("code",[t._v("int")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("MUL")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 30;\nPUSH: push 5;\nPUSH: push 3;\nMUL: pop 3, 5; push 15;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("15")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),s("p",[t._v("Finally, you can multiply "),s("code",[t._v("mutez")]),t._v(" values with "),s("code",[t._v("nat")]),t._v(" values:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("mutez")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("500")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("MUL")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 15;\nPUSH: push 500;\nPUSH: push 5;\nMUL: pop 5, 500; push 2500;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                    ")]),s("th",[t._v("type                                      ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("2500")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("mutez")])])])])])]),t._v(" "),s("h2",{attrs:{id:"the-ediv-instruction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-ediv-instruction"}},[t._v("#")]),t._v(" The "),s("strong",[s("code",[t._v("EDIV")])]),t._v(" instruction")]),t._v(" "),s("p",[t._v("Division in Michelson is a little more technical than the other arithmetic operations and requires more explanation.")]),t._v(" "),s("p",[t._v("Michelson performs what is called a "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Euclidean_division",target:"_blank",rel:"noopener noreferrer"}},[t._v("Euclidean division"),s("OutboundLink")],1),t._v(", hence the "),s("strong",[t._v("E")]),t._v("(uclidean)"),s("strong",[t._v("DIV")]),t._v("(ision) name. In a nutshell, a Euclidean division divides two numbers together and returns a result (formally known as the "),s("em",[t._v("quotient")]),t._v(") and a "),s("em",[t._v("remainder")]),t._v(" (there are no float numbers in Michelson). If there is a pizza with 9 slices and 4 people who want pizza, a Euclidean division of the pizza will distribute 2 slices to everyone (total 8 slices) with 1 slice left.")]),t._v(" "),s("p",[t._v("Keeping in mind this example, let's observe how the division and its result would look like in Michelson:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("4")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("9")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("EDIV")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 2500;\nPUSH: push 4;\nPUSH: push 9;\nEDIV: pop 9, 4; push ((2, 1),);")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                               ")]),s("th",[t._v("type                                                      ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("Some (Pair 2 1)")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("option (pair int nat)")])])])])])]),t._v(" "),s("p",[t._v("Now that's a surprise! The other arithmetic operations above only yield numbers but this one gives us a pretty complex result back! The result of "),s("strong",[s("code",[t._v("EDIV")])]),t._v(" is an option that contains a pair with the quotient (the result of the division) on the left and the remainder on the right. The quotient is of type "),s("code",[t._v("int")]),t._v(" and the remainder is of type "),s("code",[t._v("nat")]),t._v(" (unsurprisingly, the remainder cannot be a negative number).")]),t._v(" "),s("p",[t._v("Outside of "),s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("nat")]),t._v(", you can use "),s("strong",[s("code",[t._v("EDIV")])]),t._v(" with "),s("code",[t._v("mutez")]),t._v(" values, only if the divisor is of type "),s("code",[t._v("nat")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("mutez")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("500")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("EDIV")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop ((2, 1),);\nPUSH: push 5;\nPUSH: push 500;\nEDIV: pop 500, 5; push ((100, 0),);")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                                 ")]),s("th",[t._v("type                                                          ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("Some (Pair 100 0)")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("option (pair mutez mutez)")])])])])])]),t._v(" "),s("p",[t._v("The example above is also great to demonstrate that the pair result can contain a "),s("code",[t._v("0")]),t._v(" as the remainder of the division.")]),t._v(" "),s("h2",{attrs:{id:"other-operations-on-numeric-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#other-operations-on-numeric-values"}},[t._v("#")]),t._v(" Other operations on numeric values")]),t._v(" "),s("p",[t._v("Outside of arithmetic operations, you can use other operations to manipulate numeric values in Michelson. We've already talked about "),s("strong",[s("code",[t._v("ABS")])]),t._v(" earlier that turns an "),s("code",[t._v("int")]),t._v(" value into a "),s("code",[t._v("nat")]),t._v(". Here is a refresher:")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ABS")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("-6")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ABS")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token keyword"},[t._v("DUMP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop ((100, 0),);\nPUSH: push 5;\nABS: pop 5; push 5;\nPUSH: push -6;\nABS: pop -6; push 6;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                 ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("6")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])])]),t._v(" "),s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("5")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])])])])])]),t._v(" "),s("p",[t._v("You can use "),s("strong",[s("code",[t._v("NEG")])]),t._v(" to turn a positive value into a negative one. The result will logically be an "),s("code",[t._v("int")]),t._v(" even if the value you give is a "),s("code",[t._v("nat")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("NEG")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("NEG")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token keyword"},[t._v("DUMP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP_ALL: drop all;\nPUSH: push 5;\nNEG: pop 5; push -5;\nPUSH: push 5;\nNEG: pop 5; push -5;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                  ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("-5")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])]),t._v(" "),s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("-5")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),s("p",[t._v("Sometimes, you may want to flip the type of a number from "),s("code",[t._v("nat")]),t._v(" to "),s("code",[t._v("int")]),t._v(" the same way "),s("strong",[s("code",[t._v("ABS")])]),t._v(" turns an "),s("code",[t._v("int")]),t._v(" into a "),s("code",[t._v("nat")]),t._v(". In this case, you can use the "),s("strong",[s("code",[t._v("INT")])]),t._v(" instruction:")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),s("p",[t._v("you may have noticed by now that Michelson is case-sensitive, writing "),s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("INT")]),t._v(" is completely different, as is writing "),s("code",[t._v("pair")]),t._v(", "),s("code",[t._v("Pair")]),t._v(" and "),s("code",[t._v("PAIR")]),t._v(". Types are always written in lowercase ("),s("code",[t._v("pair")]),t._v("), values are written with their first character uppercase ("),s("code",[t._v("Pair")]),t._v(") and instructions are all uppercase ("),s("code",[t._v("PAIR")]),t._v(").")])]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("nat")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("INT")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token keyword"},[t._v("DUMP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP_ALL: drop all;\nPUSH: push 5;\nINT: pop 5; push 5;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                 ")]),s("th",[t._v("type                                    ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("5")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),s("p",[t._v("Michelson offers also a practical shortcut to check if an "),s("code",[t._v("int")]),t._v(" is positive and turn it into a "),s("code",[t._v("nat")]),t._v(": "),s("strong",[s("code",[t._v("ISNAT")])]),t._v(". The instruction takes a value of type "),s("code",[t._v("int")]),t._v(" and returns "),s("code",[t._v("None")]),t._v(" if the "),s("code",[t._v("int")]),t._v(" is less than "),s("code",[t._v("0")]),t._v(" or "),s("code",[t._v("(Some nat)")]),t._v(" if the "),s("code",[t._v("int")]),t._v(" is greater than "),s("code",[t._v("0")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-Michelson extra-class"},[s("pre",{staticClass:"language-Michelson"},[s("code",{staticClass:"language-Michelson"},[s("span",{staticClass:"token operator"},[t._v("DROP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ISNAT")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("PUSH")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token number"},[t._v("-4")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token operator"},[t._v("ISNAT")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")]),s("span",{staticClass:"token keyword"},[t._v("DUMP")]),s("span",{staticClass:"token punctuation"},[t._v(" ")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),s("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),s("div",{staticClass:"stdout"},[s("pre",[s("span",{staticClass:"stream-name"},[t._v("stdout")]),s("br"),t._v("DROP: pop 5;\nPUSH: push 5;\nISNAT: pop 5; push (5,);\nPUSH: push -4;\nISNAT: pop -4; push None;")])]),t._v(" "),s("div",{staticClass:"embedded-html"},[s("table",[s("thead",[s("tr",[s("th",[t._v("value                                      ")]),s("th",[t._v("type                                           ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("None")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("option nat")])])]),t._v(" "),s("tr",[s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("Some 5")])]),s("td",[s("pre",{staticStyle:{"text-align":"left"}},[t._v("option nat")])])])])])]),t._v(" "),s("Binder",{attrs:{filepath:"notebooks/tutorials/04/04_arithmetic_operation_optionals.ipynb"}})],1)}),[],!1,null,null,null);a.default=e.exports}}]);