(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{379:function(t,s,a){"use strict";a.r(s);var n=a(43),o=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"chapter-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-12"}},[t._v("#")]),t._v(" Chapter 12")]),t._v(" "),a("h2",{attrs:{id:"union-types-and-entrypoints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union-types-and-entrypoints"}},[t._v("#")]),t._v(" Union types and entrypoints")]),t._v(" "),a("p",[t._v("So far, in all the contracts we have written, the flow of the execution was pretty straighforward:")]),t._v(" "),a("ol",[a("li",[t._v("The transaction is sent to the contract with a single parameter.")]),t._v(" "),a("li",[t._v("The contract uses or not the parameter and runs its code.")]),t._v(" "),a("li",[t._v("A pair containing a list of operations and the new storage is returned.")])]),t._v(" "),a("p",[t._v("This works well for simple contracts, but what if you want your contract to do multiple things? You could write different separate contracts of course, but sharing their storage and state will be more complicated. In this chapter, you will learn how to change the behaviour of your contract according to the parameters it received by implementing entrypoints!")]),t._v(" "),a("p",[t._v("Let's check a very simple example and see how we can modify it to change its behaviour:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter int;\nstorage int;\ncode { { DUP ; CAR ; DIP { CDR } } ; ADD ; NIL operation ; PAIR };\nRUN: use %default; drop all; push (5, 6);\nDUP: push (5, 6);\nCAR: pop (5, 6); push 5;\nDIP: protect 1 item(s);\nCDR: pop (5, 6); push 6;\nrestore 1 item(s);\nADD: pop 5, 6; push 11;\nNIL: push [];\nPAIR: pop [], 11; push ([], 11);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("11")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("This couldn't be more simple ðŸ˜… The contract takes the "),a("code",[t._v("int")]),t._v(" sent in the parameters and adds it to the "),a("code",[t._v("int")]),t._v(" in the storage."),a("br"),t._v("\nNow, imagine you want the same contract to add or subtract two numbers. There must be something in the parameter that tells the contract what to do. This is when "),a("code",[t._v("union types")]),t._v(" intervene! Let's see first how that would look like:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SUB")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Left")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter (or int int);\nstorage int;\ncode { { DUP ; CAR ; DIP { CDR } } ; IF_LEFT { ADD } { SUB } ; NIL operation ; PAIR };\nRUN: use %default; drop all; push (5, 6);\nDUP: push (5, 6);\nCAR: pop (5, 6); push 5;\nDIP: protect 1 item(s);\nCDR: pop (5, 6); push 6;\nrestore 1 item(s);\nIF_LEFT: pop 5; push 5;\nADD: pop 5, 6; push 11;\nNIL: push [];\nPAIR: pop [], 11; push ([], 11);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("11")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("You can now see that there are three different things in this new contract compared to the previous one:")]),t._v(" "),a("ol",[a("li",[t._v("The parameter is "),a("code",[t._v("(or (int %increment) (int %decrement))")]),t._v(" instead of "),a("code",[t._v("int")]),t._v(".")]),t._v(" "),a("li",[t._v("There is a conditional structure in the code with "),a("strong",[a("code",[t._v("IF_LEFT")])]),t._v(".")]),t._v(" "),a("li",[t._v("The parameters of the "),a("strong",[a("code",[t._v("RUN")])]),t._v(" instruction are different.")])]),t._v(" "),a("p",[t._v("In order to tell the contract to change its behaviour, we are using a "),a("code",[t._v("union type")]),t._v(". As its name indicates, a "),a("code",[t._v("union type")]),t._v(" is a type made of the union of two other types. It holds one value that may be of either type. In its most basic form, a union type is declared between parentheses with the keyword "),a("code",[t._v("or")]),t._v(" followed by the two types you want to use. The type on the left is the "),a("code",[t._v("left")]),t._v(" part of the union, the type on the right the "),a("code",[t._v("right")]),t._v(" part. After implementing the union type as a parameter, we can pass two different arguments to the contract: a union value with a value on the left or a union value with a value on the right. Now, we want the contract to behave differently according to the value present in the union value. This is what "),a("strong",[a("code",[t._v("IF_LEFT")])]),t._v(" does. When we unpair the pair of parameter/storage, the contract knows it expects a union type. If the left side holds a value, the value in "),a("code",[t._v("(Left value)")]),t._v(" will be pushed onto the stack. If the right side holds a value, the value in "),a("code",[t._v("(Right value)")]),t._v(" will be pushed. This is what you can see after the "),a("strong",[a("code",[t._v("RUN")])]),t._v(" instruction, we indicated "),a("code",[t._v("(Left 5)")]),t._v(" as the value we want to use.")]),t._v(" "),a("p",[t._v("As you may have guessed, "),a("strong",[a("code",[t._v("IF_LEFT")])]),t._v(" will branch into the first pair of curly braces if the left side of the union value holds a value or it will branch into the second pair of curly braces if the right side of the union value holds a value. After branching, the naked value inside the union value is pushed onto the stack and ready to be used. In the case of this example, the "),a("code",[t._v("int")]),t._v(" value is added to the value in the storage and the new storage is returned.")]),t._v(" "),a("p",[t._v("To drive the point home, let's see what happens if we want to subtract the value passed as a parameter:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SUB")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Right")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter (or int int);\nstorage int;\ncode { { DUP ; CAR ; DIP { CDR } } ; IF_LEFT { ADD } { SUB } ; NIL operation ; PAIR };\nRUN: use %default; drop all; push (5, 6);\nDUP: push (5, 6);\nCAR: pop (5, 6); push 5;\nDIP: protect 1 item(s);\nCDR: pop (5, 6); push 6;\nrestore 1 item(s);\nIF_LEFT: pop 5; push 5;\nSUB: pop 5, 6; push -1;\nNIL: push [];\nPAIR: pop [], -1; push ([], -1);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("-1")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("Pretty simple, we just replace "),a("code",[t._v("(Left 5)")]),t._v(" with "),a("code",[t._v("(Right 5)")]),t._v("! The result of the operation ("),a("code",[t._v("-1")]),t._v(") indicates that the contract subtracted the two values instead of adding them together!")]),t._v(" "),a("p",[t._v("Now that you understood the bases of using a union type as a parameter, we can introduce annotations to make the code a little easier to read:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%increment")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%decrement")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SUB")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%increment")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter (or (int %increment) (int %decrement));\nstorage int;\ncode { { DUP ; CAR ; DIP { CDR } } ; IF_LEFT { ADD } { SUB } ; NIL operation ; PAIR };\nRUN: use %increment; drop all; push (5, 6);\nDUP: push (5, 6);\nCAR: pop (5, 6); push 5;\nDIP: protect 1 item(s);\nCDR: pop (5, 6); push 6;\nrestore 1 item(s);\nIF_LEFT: pop 5; push 5;\nADD: pop 5, 6; push 11;\nNIL: push [];\nPAIR: pop [], 11; push ([], 11);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("11")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("This contract does the same thing as the one before, the difference is that you can annotate the arguments of the union value and when running the contract, you can use the annotations to target the value of your choice. If you replace "),a("code",[t._v("RUN %increment 5 6")]),t._v(" with "),a("code",[t._v("RUN %decrement 5 6")]),t._v(", you will obtain "),a("code",[t._v("-1")]),t._v(".")]),t._v(" "),a("p",[t._v('Each side of the union type represents the "entrypoint" of the contract and using annotations allows us to identify these entrypoints more clearly. We can say our contract has an "increment" entrypoint and a "decrement" entrypoint. An entrypoint in a Michelson contract is nothing but the left or right side of a union type with an annotation. This only works if every annotation is unique.')]),t._v(" "),a("p",[t._v("Now imagine, you want a third entrypoint, for example to reset the storage to zero. Union types only allow two values (left/right). However, nested union types are a thing in Michelson and are widely used in contracts! Let's see how it would look like first without annotations:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SUB")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("0")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Left")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Left")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter (or (or int int) unit);\nstorage int;\ncode { { DUP ; CAR ; DIP { CDR } } ; IF_LEFT { IF_LEFT { ADD } { SUB } } { DROP ; DROP ; PUSH int 0 } ; NIL operation ; PAIR };\nRUN: use %default; drop all; push (5, 6);\nDUP: push (5, 6);\nCAR: pop (5, 6); push 5;\nDIP: protect 1 item(s);\nCDR: pop (5, 6); push 6;\nrestore 1 item(s);\nIF_LEFT: pop 5; push 5;\nIF_LEFT: pop 5; push 5;\nADD: pop 5, 6; push 11;\nNIL: push [];\nPAIR: pop [], 11; push ([], 11);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("11")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("The first "),a("strong",[a("code",[t._v("IF_LEFT")])]),t._v(" unwraps the first union value and the second one unwraps the second union value that decides if the contract is going to add the values or subtract them. This contract adds the two values but you can easily subtract by replacing "),a("code",[t._v("RUN %default (Left (Left 5)) 6 ;")]),t._v(" with "),a("code",[t._v("RUN %default (Left (Right 5)) 6 ;")]),t._v(". If you want to reset the storage to "),a("code",[t._v("0")]),t._v(", you can write "),a("code",[t._v("RUN %default (Right Unit) 6 ;")]),t._v(".")]),t._v(" "),a("p",[t._v("Here is the same contract written with annotations:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%increment")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%decrement")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%reset")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SUB")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("0")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%increment")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter (or (or (int %increment) (int %decrement)) (unit %reset));\nstorage int;\ncode { { DUP ; CAR ; DIP { CDR } } ; IF_LEFT { IF_LEFT { ADD } { SUB } } { DROP ; DROP ; PUSH int 0 } ; NIL operation ; PAIR };\nRUN: use %increment; drop all; push (5, 6);\nDUP: push (5, 6);\nCAR: pop (5, 6); push 5;\nDIP: protect 1 item(s);\nCDR: pop (5, 6); push 6;\nrestore 1 item(s);\nIF_LEFT: pop 5; push 5;\nIF_LEFT: pop 5; push 5;\nADD: pop 5, 6; push 11;\nNIL: push [];\nPAIR: pop [], 11; push ([], 11);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("11")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("Obviously, you can make the parameters as complex as you wish, which is often the case with more complex smart contracts:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%add")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%sub")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token comment"},[t._v("## unpair the pair and add the numbers")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("INT")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token comment"},[t._v("## unpair the pair and subtract the numbers")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SUB")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%add")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("0")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter (or (pair :add nat nat) (pair :sub nat nat));\nstorage int;\ncode { CAR ; IF_LEFT { { DUP ; CAR ; DIP { CDR } } ; ADD ; INT } { { DUP ; CAR ; DIP { CDR } } ; SUB } ; NIL operation ; PAIR };\nRUN: use %add;\nparameter (or (pair :add nat nat) (pair :sub nat nat));\nstorage int;\ncode { CAR ; IF_LEFT { { DUP ; CAR ; DIP { CDR } } ; ADD ; INT } { { DUP ; CAR ; DIP { CDR } } ; SUB } ; NIL operation ; PAIR };\nRUN: use %add;\nparameter (or (pair %add nat nat) (pair %sub nat nat));\nstorage int;\ncode { CAR ; IF_LEFT { { DUP ; CAR ; DIP { CDR } } ; ADD ; INT } { { DUP ; CAR ; DIP { CDR } } ; SUB } ; NIL operation ; PAIR };\nRUN: use %add; drop all; push ((5, 6), 0);\nCAR: pop ((5, 6), 0); push (5, 6);\nIF_LEFT: pop (5, 6); push (5, 6);\nDUP: push (5, 6);\nCAR: pop (5, 6); push 5;\nDIP: protect 1 item(s);\nCDR: pop (5, 6); push 6;\nrestore 1 item(s);\nADD: pop 5, 6; push 11;\nINT: pop 11; push 11;\nNIL: push [];\nPAIR: pop [], 11; push ([], 11);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("11")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("In this contract example, we pass a union value made of two pairs containing the values we want to add or subtract (instead of using the one in the storage). We tell the contract which one to use with "),a("code",[t._v("RUN %add (Pair 5 6) 0")]),t._v(" but we could also have written it "),a("code",[t._v("RUN %default (Left (Pair 5 6)) 0")]),t._v(".")]),t._v(" "),a("p",[t._v("In addition to "),a("strong",[a("code",[t._v("IF_LEFT")])]),t._v(", you can also use "),a("strong",[a("code",[t._v("IF_RIGHT")])]),t._v(" which is a macro that will just reverse the order of the element in the union value and run "),a("strong",[a("code",[t._v("IF_LEFT")])]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%increment")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%decrement")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_RIGHT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SUB")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%increment")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter (or (int %increment) (int %decrement));\nstorage int;\ncode { { DUP ; CAR ; DIP { CDR } } ; { IF_LEFT { ADD } { SUB } } ; NIL operation ; PAIR };\nRUN: use %increment; drop all; push (5, 6);\nDUP: push (5, 6);\nCAR: pop (5, 6); push 5;\nDIP: protect 1 item(s);\nCDR: pop (5, 6); push 6;\nrestore 1 item(s);\nIF_LEFT: pop 5; push 5;\nADD: pop 5, 6; push 11;\nNIL: push [];\nPAIR: pop [], 11; push ([], 11);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("11")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("To finish with conditionals, there is a macro you can use to check if you want to verify that the correct side of the union type is used, "),a("strong",[a("code",[t._v("ASSERT_LEFT")])]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%increment")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%forbidden")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("ASSERT_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%forbidden")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter (or (nat %increment) (unit %forbidden));\nstorage nat;\ncode { { DUP ; CAR ; DIP { CDR } } ; { IF_LEFT { RENAME } { { UNIT ; FAILWITH } } } ; ADD ; NIL operation ; PAIR };\nRUN: use %forbidden; drop all; push (Unit, 5);\nDUP: push (Unit, 5);\nCAR: pop (Unit, 5); push Unit;\nDIP: protect 1 item(s);\nCDR: pop (Unit, 5); push 5;\nrestore 1 item(s);\nIF_LEFT: pop Unit; push Unit;\nUNIT: push Unit;\nFAILWITH: pop Unit;")])]),t._v(" "),a("div",{staticClass:"stderr"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stderr")]),a("br"),t._v("MichelsonRuntimeError: Unit\nat RUN -> IF_LEFT -> FAILWITH")])]),t._v(" "),a("p",[t._v("As you can see, the contract fails if we try to call the "),a("em",[t._v("forbidden")]),t._v(" entrypoint. If you switch it to "),a("em",[t._v("increment")]),t._v(" and pass a number instead of "),a("code",[t._v("Unit")]),t._v(", it will work!")]),t._v(" "),a("p",[t._v("So far, we have only received union values in the parameters, but it is also possible to create them within the smart contracts. That can be very useful when building a new transaction if you are targetting the entrypoint of another contract. Here is how you can easily set a value of type "),a("code",[t._v("union")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("BEGIN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token comment"},[t._v("## By pushing it")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Left")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"hello"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token comment"},[t._v("## By building it")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("LEFT")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter unit;\nstorage unit;\nBEGIN: use %default; drop all; push (Unit, Unit);\nDROP: pop (Unit, Unit);\nPUSH: push hello;\nPUSH: push 6;\nLEFT: pop 6; push 6;")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                            ")]),a("th",[t._v("type                                              ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Left 6")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("or int string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Left "hello"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("or string nat")])])])])])]),t._v(" "),a("p",[t._v("A "),a("code",[t._v("union type")]),t._v(", like an "),a("code",[t._v("int")]),t._v(" or a "),a("code",[t._v("string")]),t._v(" is a "),a("em",[t._v("pushable")]),t._v(" value, which means that you can use the "),a("strong",[a("code",[t._v("PUSH")])]),t._v(" instruction to add a new value onto the stack. If you want to add a new union value, you can use "),a("strong",[a("code",[t._v("PUSH")])]),t._v(" followed by the type of the union and its value. Although the union type is a value than can be of two different types, it is always one single value, this is why when you push the value onto the stack, you must use "),a("code",[t._v("(Left value)")]),t._v(" or "),a("code",[t._v("(Right value)")]),t._v(" to initialize it."),a("br"),t._v("\nIf you want to use a value on the stack to create the union value, use "),a("strong",[a("code",[t._v("LEFT")])]),t._v(" to add it to the left side of the union or "),a("strong",[a("code",[t._v("RIGHT")])]),t._v(" to add it to the right side and add the expected type of the other side after the instruction.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("union")]),t._v(" type is a powerful concept to create entrypoints in your contract. You can use as many nested union values as you need to redirect the execution of the contract according to the value sent as a parameter.")]),t._v(" "),a("p",[t._v("Union types are so useful that it is also possible to use them in ways you may not have imagined before this tutorial! One of the possible applications of "),a("code",[t._v("union")]),t._v(" types is the implementation of "),a("code",[t._v("enum")]),t._v("-like values. Let's consider the following contract:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%UP")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%DOWN")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("or")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%LEFT")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%RIGHT")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"UP"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("FAILWITH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"DOWN"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("FAILWITH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_LEFT")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"LEFT"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("FAILWITH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"RIGHT"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("FAILWITH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Left")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Right")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v('parameter (or (or (unit %UP) (unit %DOWN)) (or (unit %LEFT) (unit %RIGHT)));\nstorage unit;\ncode { CAR ; IF_LEFT { IF_LEFT { PUSH string "UP" ; FAILWITH } { PUSH string "DOWN" ; FAILWITH } } { IF_LEFT { PUSH string "LEFT" ; FAILWITH } { PUSH string "RIGHT" ; FAILWITH } } };\nRUN: use %default; drop all; push (Unit, Unit);\nCAR: pop (Unit, Unit); push Unit;\nIF_LEFT: pop Unit; push Unit;\nIF_LEFT: pop Unit; push Unit;\nPUSH: push DOWN;\nFAILWITH: pop DOWN;')])]),t._v(" "),a("div",{staticClass:"stderr"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stderr")]),a("br"),t._v("MichelsonRuntimeError: DOWN\nat RUN -> IF_LEFT -> IF_LEFT -> FAILWITH")])]),t._v(" "),a("p",[t._v("The contract itself is not very interesting but it demonstrates the logic of creating "),a("code",[t._v("enums")]),t._v(" with "),a("code",[t._v("union")]),t._v(" values. Here, a nested union value allows us to test a given state that can have 4 different values. By comparison, if we wanted to use "),a("code",[t._v("boolean")]),t._v(" values, we would have to set 2 separate values in the parameters, probably provide them as a "),a("code",[t._v("pair")]),t._v(" which would force us to "),a("code",[t._v("UNPAIR")]),t._v(" the parameter first before running 2 separate conditions. The solution with a "),a("code",[t._v("union")]),t._v(" is cleaner and more effective.")]),t._v(" "),a("Binder",{attrs:{filepath:"notebooks/tutorials/12/12_union_entrypoints_parameters.ipynb"}})],1)}),[],!1,null,null,null);s.default=o.exports}}]);