(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{376:function(t,s,a){"use strict";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"chapter-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-2"}},[t._v("#")]),t._v(" Chapter 2")]),t._v(" "),a("p",[t._v("This chapter introduces types in Michelson, advanced stack usage and stack protection instructions.")]),t._v(" "),a("h2",{attrs:{id:"types-in-michelson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-in-michelson"}},[t._v("#")]),t._v(" Types in Michelson")]),t._v(" "),a("p",[t._v("Michelson is a strongly typed language with no type inference, which means that you must always indicate which type you are using to the typechecker. The typechecker will then check that all the values used in the contract are correctly typed."),a("br"),t._v("\nFor example, if you write "),a("code",[t._v('PUSH int 3 ; PUSH string "hello" ; ADD ;')]),t._v(", the typechecker will throw an error as you cannot add an integer and a string together:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token comment"},[t._v("## THIS DOESN'T WORK!")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("3")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"Hello"')]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v('storage unit;\nparameter unit;\ncode { DROP ; PUSH int 3 ; PUSH string "Hello" ; ADD ; NIL operation ; PAIR };\nRUN: use %default; drop all; push (Unit, Unit);\nDROP: pop (Unit, Unit);\nPUSH: push 3;\nPUSH: push Hello;\nADD: pop Hello, 3;')])]),t._v(" "),a("div",{staticClass:"stderr"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stderr")]),a("br"),t._v("MichelsonRuntimeError: unsupported argument types String and Int\nat RUN -> ADD")])]),t._v(" "),a("p",[t._v('It is also worth pointing out that the values you use on the stack are immutable, which means that you cannot "modify" them, you must remove them, add them or concatenate them together to change them.')]),t._v(" "),a("p",[t._v("You can find below a list of the most common types in Michelson (a list of all the types is available "),a("a",{attrs:{href:"https://michelson.nomadic-labs.com/#types",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v("):")]),t._v(" "),a("ul",[a("li",[t._v("Core data types:\n"),a("ul",[a("li",[a("strong",[t._v("int")]),t._v(" (positive and negative numbers)")]),t._v(" "),a("li",[a("strong",[t._v("nat")]),t._v(" (non negative numbers)")]),t._v(" "),a("li",[a("strong",[t._v("string")]),t._v(" (one or multiple characters, but can also be empty, as well as some escape sequences: "),a("code",[t._v("\\n")]),t._v(", "),a("code",[t._v("\\\\")]),t._v(" and "),a("code",[t._v('\\"')]),t._v(")")]),t._v(" "),a("li",[a("strong",[t._v("bytes")])]),t._v(" "),a("li",[a("strong",[t._v("pair")]),t._v(" (a pair of two values)")]),t._v(" "),a("li",[a("strong",[t._v("bool")]),t._v(" (boolean value)")]),t._v(" "),a("li",[a("strong",[t._v("unit")]),t._v(" (a placeholder type when no value or parameter is required)")]),t._v(" "),a("li",[a("strong",[t._v("option")]),t._v(" (optional value with 2 possible values: "),a("em",[t._v("SOME (type)")]),t._v(" and "),a("em",[t._v("NONE")]),t._v(" )")]),t._v(" "),a("li",[a("strong",[t._v("list")]),t._v(" (a list of ordered values of the same type)")]),t._v(" "),a("li",[a("strong",[t._v("set")]),t._v(" (a list of unordered unique values of the same type)")]),t._v(" "),a("li",[a("strong",[t._v("map")]),t._v(" (a list of key/value pairs)")]),t._v(" "),a("li",[a("strong",[t._v("big_map")]),t._v(" (a lazily deserialized list of key/value pairs, used for large amounts of data)")])])]),t._v(" "),a("li",[t._v("Domain specific data types:\n"),a("ul",[a("li",[a("strong",[t._v("timestamp")]),t._v(" (dates in RFC 3339 format or unix timestamp)")]),t._v(" "),a("li",[a("strong",[t._v("mutez")]),t._v(" (Tezos tokens type, represents one millionth of a tez)")]),t._v(" "),a("li",[a("strong",[t._v("address")]),t._v(" (Tezos addresses)")]),t._v(" "),a("li",[a("strong",[t._v("operation")]),t._v(" (internal operation emitted by a contract)")]),t._v(" "),a("li",[a("strong",[t._v("key")]),t._v(" (public cryptographic key)")])])])]),t._v(" "),a("p",[t._v("Some of these types are called "),a("a",{attrs:{href:"https://tezos.gitlab.io/whitedoc/michelson.html#full-grammar",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("comparable types")]),a("OutboundLink")],1),t._v(" which means that the comparison of two values of these types will yield an "),a("em",[t._v("integer")]),t._v(" that you can then use to know if they are equal or if one is lower or higher than the other."),a("br"),t._v("\nFor example, "),a("em",[t._v("int")]),t._v(", "),a("em",[t._v("nat")]),t._v(", "),a("em",[t._v("string")]),t._v(", "),a("em",[t._v("bytes")]),t._v(", "),a("em",[t._v("mutez")]),t._v(", "),a("em",[t._v("bool")]),t._v(", "),a("em",[t._v("timestamp")]),t._v(" and "),a("em",[t._v("address")]),t._v(" are all comparable types.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("Be aware of the syntax for types of values that contain other values: for example "),a("code",[t._v("(option value)")]),t._v(" for option, "),a("code",[t._v("(map key value)")]),t._v(" for maps, "),a("code",[t._v("(pair left_value right_value)")]),t._v(" for pairs, etc.")])]),t._v(" "),a("h2",{attrs:{id:"advanced-stack-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced-stack-usage"}},[t._v("#")]),t._v(" Advanced stack usage")]),t._v(" "),a("p",[t._v("It is time to play with the stack!")]),t._v(" "),a("p",[t._v("In order to manipulate the stack, you are going to use "),a("em",[t._v("instructions")]),t._v(". Instructions are generally short words that will create an effect on the stack. For example, you can use an instruction to push another element on top of the stack, an instruction to duplicate an element, an instruction to change the element position, etc.")]),t._v(" "),a("p",[t._v("We are going to start with simple instructions for simple operations and write a smart contract that accepts a "),a("em",[t._v("unit")]),t._v(" parameter, has a "),a("em",[t._v("string")]),t._v(" in the storage and modifies the string in the storage.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v('we will use the terms "instruction" and "opcode" interchangeably throughout these tutorials. They both refer to the short words used to manipulate the stack in Michelson.')])]),t._v(" "),a("h3",{attrs:{id:"inline-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inline-code"}},[t._v("#")]),t._v(" Inline code")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DUP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"world"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CONCAT")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DIP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v('storage string;\nparameter unit;\ncode { DUP ; CAR ; SWAP ; CDR ; PUSH string "world" ; SWAP ; CONCAT ; DIP { DROP } ; NIL operation ; PAIR };')])]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"Hello "')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("RUN: use %default; drop all; push (Unit, 'Hello ');\n  DUP: push (Unit, 'Hello ');\n  CAR: pop (Unit, 'Hello '); push Unit;\n  SWAP: pop Unit, (Unit, 'Hello '); push Unit; push (Unit, 'Hello ');\n  CDR: pop (Unit, 'Hello '); push Hello ;\n  PUSH: push world;\n  SWAP: pop world, Hello ; push world; push Hello ;\n  CONCAT: pop Hello ; pop world; push Hello world;\n  DIP: protect 1 item(s);\n    DROP: pop Unit;\n    restore 1 item(s);\n  NIL: push [];\n  PAIR: pop [], Hello world; push ([], 'Hello world');")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                             ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"Hello world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])])])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("this example does some unnecessary stack manipulations whose purpose is only to introduce new instructions and demonstrate how they work. The contract code above would be more efficient like this: "),a("code",[t._v('CDR ; PUSH string "world" ; SWAP ; CONCAT ; NIL operation ; PAIR')]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"step-by-step-execution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-by-step-execution"}},[t._v("#")]),t._v(" Step-by-step execution")]),t._v(" "),a("p",[t._v("Every Michelson contract starts with two sections separated by semi-colons that indicate the type of the storage and the parameter.")]),t._v(" "),a("p",[t._v("For this example, we want to create a storage that will keep a string and a parameter that will receive a unit:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("parameter unit;\nstorage string;")])]),t._v(" "),a("p",[t._v("We start the step-by-step execution by initializing the storage of the smart contract and the received parameter:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("BEGIN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"Hello "')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                  ")]),a("th",[t._v("type                                                 ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair Unit "Hello "')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair unit string")])])])])])]),t._v(" "),a("p",[t._v("The first thing we want to do is duplicate the passed parameter.")]),t._v(" "),a("p",[t._v("To "),a("strong",[t._v("dup")]),t._v("licate an element of the stack, we use the "),a("strong",[a("code",[t._v("DUP")])]),t._v(" opcode. "),a("strong",[a("code",[t._v("DUP")])]),t._v(" takes the element at the top of the stack, copies it and pushes it above.")]),t._v(" "),a("p",[a("em",[t._v("In a real-world example, this would be an extra step that wouldn't be necessary, but the goal here is to showcase different instructions and how they work together 😃")])]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("DUP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                  ")]),a("th",[t._v("type                                                 ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair Unit "Hello "')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair unit string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair Unit "Hello "')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair unit string")])])])])])]),t._v(" "),a("p",[t._v("The element at the top of the stack is now a "),a("code",[t._v("pair")]),t._v(". A pair is a type of value that consists of two elements in fixed order, that can be labeled as left and right for simplicity. Michelson provides instructions to extract these values so we can manipulate them. The first one is "),a("strong",[a("code",[t._v("CAR")])]),t._v(" that takes a pair at the top of the stack and returns the value on the left side. Note that the value on the right is taken out of the stack and lost:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                  ")]),a("th",[t._v("type                                                 ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Unit")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("unit")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair Unit "Hello "')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair unit string")])])])])])]),t._v(" "),a("p",[t._v("The execution of the contract code always goes from top to bottom, so you may be wondering how to access the pair at the bottom of the stack, if this is the one you want to work with now?")]),t._v(" "),a("p",[t._v("Fortunately, Michelson provides opcodes to change the order of the elements on the stack. The first one we encounter, "),a("strong",[a("code",[t._v("SWAP")])]),t._v(" switches the position of the two elements on top of the stack: the element at index 0 goes to index 1 and the element at index 1 goes to index 0:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                  ")]),a("th",[t._v("type                                                 ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair Unit "Hello "')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair unit string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Unit")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("unit")])])])])])]),t._v(" "),a("p",[t._v("We've introduced the "),a("strong",[a("code",[t._v("CAR")])]),t._v(" instruction which extract the left part of a pair.")]),t._v(" "),a("p",[t._v("To extract the right part of the element on top of the stack, you can use "),a("strong",[a("code",[t._v("CDR")])]),t._v(". As for "),a("strong",[a("code",[t._v("CAR")])]),t._v(", the left part of the pair will be removed from the stack and lost:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("CDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                        ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"Hello "')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Unit")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("unit")])])])])])]),t._v(" "),a("p",[t._v("You can now see above that the stack consists of the string "),a("em",[t._v('"Hello "')]),t._v(" and a unit.")]),t._v(" "),a("p",[t._v("Let's continue and add a string on top of the stack with the "),a("strong",[a("code",[t._v("PUSH")])]),t._v(" instruction:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"world"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                        ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"Hello "')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Unit")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("unit")])])])])])]),t._v(" "),a("p",[t._v("We should put the two strings on top of the stack in the right order so we can store "),a("em",[t._v('"Hello world"')]),t._v(". We use the "),a("strong",[a("code",[t._v("SWAP")])]),t._v(" instruction for that:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                        ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"Hello "')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Unit")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("unit")])])])])])]),t._v(" "),a("p",[t._v('Once in the right order, we want to put the two strings together to write "Hello world".')]),t._v(" "),a("p",[t._v("Michelson provides an instruction that just does that: "),a("strong",[a("code",[t._v("CONCAT")])]),t._v(". It takes the two strings at the top of the stack and returns a single string made of the two previous strings, one after the other.")]),t._v(" "),a("p",[t._v("As usual, you must be sure there are two values of type "),a("code",[t._v("string")]),t._v(" on top of the stack. "),a("strong",[a("code",[t._v("CONCAT")])]),t._v(" will not work with integers, booleans, etc. and it will raise an error at type checking:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("CONCAT")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                             ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"Hello world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Unit")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("unit")])])])])])]),t._v(" "),a("p",[t._v("The next line introduces two important instructions.")]),t._v(" "),a("p",[t._v("We now have two elements in the stack: a string at "),a("em",[t._v("index 0")]),t._v(" and a unit at "),a("em",[t._v("index 1")]),t._v(". We only want to keep the string and we want to get rid of the unit. We could use "),a("strong",[a("code",[t._v("SWAP")])]),t._v(" to put the unit on the top of the stack and remove it, but let's keep things interesting and use another approach.")]),t._v(" "),a("p",[t._v("Michelson provides an instruction that will bypass the element at the indicated position and work on the element just below. This instruction is "),a("strong",[a("code",[t._v("DIP n")])]),t._v(" ("),a("em",[t._v("n")]),t._v(" being the position of the element to bypass).")]),t._v(" "),a("p",[t._v("Regarding the positions you may use after "),a("strong",[a("code",[t._v("DIP")])]),t._v(", there are two situations that require a special attention:")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("DIP 0")])]),t._v(": This is equivalent to not using the instruction at all (there is no element at the zero position)!")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("DIP 1")])]),t._v(": This is equivalent to using "),a("strong",[a("code",[t._v("DIP")])]),t._v(" without an element position number, it will bypass the first element of the stack and work on the second one.")])]),t._v(" "),a("p",[t._v("The "),a("strong",[a("code",[t._v("DIP")])]),t._v(" instruction is followed by a piece of code that will be executed on the element "),a("em",[t._v("below")]),t._v(" the element that was bypassed. This piece of code is surrounded by curly braces.")]),t._v(" "),a("p",[t._v("After we bypassed the element in the first position, we want to remove the element at the second position (the "),a("em",[t._v("unit")]),t._v("). Michelson provides the "),a("strong",[a("code",[t._v("DROP n")])]),t._v(" instruction that just does that: it removes the element at the "),a("em",[t._v("n")]),t._v(" position. As for "),a("strong",[a("code",[t._v("DIP")])]),t._v(", there are two cases you want to keep in mind:")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("DROP 0")])]),t._v(": This will do nothing as you will try to remove an element that doesn't exist (there is nothing at the zero position of the stack).")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("DROP 1")])]),t._v(": This is equivalent to using "),a("strong",[a("code",[t._v("DROP")])]),t._v(" without an element position number, it will simply remove the element at the top of the stack.")])]),t._v(" "),a("p",[t._v("To sum up, the next instruction, "),a("code",[t._v("DIP { DROP }")]),t._v(", will bypass the first element of the stack ("),a("code",[t._v("DIP")]),t._v(") and remove the following element ("),a("code",[t._v("DROP")]),t._v(").")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("DIP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DIP: protect 1 item(s);\n  DROP: pop Unit;\n  restore 1 item(s);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                             ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"Hello world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])])])])]),t._v(" "),a("p",[t._v("Now there is a single string in our stack. It is time to wrap things up and return the final pair.")]),t._v(" "),a("p",[t._v("First, we create an empty list of operations with "),a("strong",[a("code",[t._v("NIL operation")])]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                             ")]),a("th",[t._v("type                                               ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("[]")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("list operation")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"Hello world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])])])])]),t._v(" "),a("p",[t._v("Then, we put the two elements of the stack in a pair:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                     ")]),a("th",[t._v("type                                                             ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair {} "Hello world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair (list operation) string")])])])])])]),t._v(" "),a("p",[t._v("Finally, we use the "),a("strong",[a("code",[t._v("COMMIT")])]),t._v(" instruction provided by this Jupyter notebook to return the pair containing the empty list of operations and the new storage:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("COMMIT")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                             ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"Hello world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])])])])]),t._v(" "),a("Binder",{attrs:{filepath:"notebooks/tutorials/02/02_advanced_stack_usage.ipynb"}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);