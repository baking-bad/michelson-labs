(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{372:function(t,s,a){"use strict";a.r(s);var n=a(43),o=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"chapter-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-11"}},[t._v("#")]),t._v(" Chapter 11")]),t._v(" "),a("p",[t._v("In the previous chapter, we introduced different instructions that manipulate and transform different stores of data like "),a("code",[t._v("lists")]),t._v(", "),a("code",[t._v("sets")]),t._v(" and "),a("code",[t._v("maps")]),t._v(". We learned how to create these stores, how to save new values inside and how to get them out. However, we left aside one of the most powerful features of this type of data. Instead of manipulating the values one by one, what if we'd loop through the whole structure and gain access to all the data at once? ðŸ¤¯")]),t._v(" "),a("p",[t._v("This chapter is about instructions that will help us manipulate all the values in sets, maps or big maps, whether we want to read those values, use them or modify them. As you will notice throughout the chapter, the instructions we use are sometimes the same and apply to different types, although they may be used differently. This is why you have to remember precisely how the instruction affects the structure on the stack and how the elements must be ordered on the stack before calling the instruction you want.")]),t._v(" "),a("h2",{attrs:{id:"the-loop-instruction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-loop-instruction"}},[t._v("#")]),t._v(" The "),a("strong",[a("code",[t._v("LOOP")])]),t._v(" instruction")]),t._v(" "),a("p",[t._v("Most of widely used programming languages have loops so you may be familiar with the concept. In a nutshell, loops consist of a piece of code that repeats itself until a certain condition is met. This can also be done in Michelson. Here is a very simple example of a loop:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DEBUG")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("False")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("BEGIN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("0")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("bool")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("True")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("LOOP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("1")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DUP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("CMPNEQ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                 ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("5")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("In the context of this notebook, you can also print the state inside of the loop to help with debugging with the "),a("strong",[a("code",[t._v("PRINT")])]),t._v(" keyword. This is how you can check the boolean value at the end of each iteration of the loop:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DEBUG")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("False")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("BEGIN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("0")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("bool")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("True")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("LOOP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("1")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DUP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("CMPNEQ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token keyword"},[t._v("PRINT")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"{0}"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("True; True; True; True; False;")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                 ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("5")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v('This is a naive example to demonstrate how loops work. One of the main characteristics of loops is that they "sit" on a boolean value. As long as the boolean value is '),a("code",[t._v("True")]),t._v(", the loop will keep executing the code inside. At the end of the loop, you must have at least a boolean value to tell the loop if it must continue iterating or not.")]),t._v(" "),a("p",[t._v("In this example, we push "),a("code",[t._v("int 0")]),t._v(" to the stack and "),a("code",[t._v("True")]),t._v(" before starting the loop. Then, we push "),a("code",[t._v("int 1")]),t._v(", add it to the value present on the stack, duplicate it to keep the value on the stack, push "),a("code",[t._v("int 5")]),t._v(" and compare the 2 values. "),a("strong",[a("code",[t._v("CMPNEQ")])]),t._v(" checks if the value we got from the addition is not equal to "),a("code",[t._v("5")]),t._v(". Before we reach "),a("code",[t._v("5")]),t._v(", the instruction returns "),a("code",[t._v("True")]),t._v(", which keeps the loop iterating. As soon as the value is "),a("code",[t._v("5")]),t._v(", "),a("strong",[a("code",[t._v("CMPNEQ")])]),t._v(" returns "),a("code",[t._v("False")]),t._v(" and the loop stops.")]),t._v(" "),a("p",[t._v("Loops can become more interesting if you use them with values like lists where you will be able to fetch every element of the list and use them however you want. Let's crank the difficulty up a notch and imagine we want to concatenate all the strings in a list:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DEBUG")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("False")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("BEGIN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('""')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("list")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token number"},[t._v('"hello "')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"world "')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"and "')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"Tezos"')]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("bool")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("True")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("LOOP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("IF_CONS")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DIP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CONCAT")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("bool")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("True")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("bool")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("False")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                       ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"hello world and Tezos"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])])])])]),t._v(" "),a("p",[t._v("This one is a little more complex as it makes it more difficult to follow the different changes of state of the stack.")]),t._v(" "),a("p",[t._v("Before the loop, the stack is made of three blocks: a "),a("code",[t._v("bool True")]),t._v(" block necessary to start the loop, a "),a("code",[t._v("(list string)")]),t._v(" containing the strings we want to concatenate together and an empty "),a("code",[t._v("string")]),t._v(" we will use for the first concatenation.")]),t._v(" "),a("p",[t._v("On the first iteration, the "),a("code",[t._v("bool True")]),t._v(" block is removed from the stack, which exposes the list below. "),a("strong",[a("code",[t._v("IF_CONS")])]),t._v(" pops the head of the list, pushes the tail onto the stack and pushes the head above if the list is not empty. At this point, the stack is made of a "),a("code",[t._v("string")]),t._v(", a "),a("code",[t._v("(list string)")]),t._v(" and the empty "),a("code",[t._v("string")]),t._v(". "),a("strong",[a("code",[t._v("SWAP")])]),t._v(" puts the two strings next to each other and "),a("strong",[a("code",[t._v("DIP { SWAP ; CONCAT }")])]),t._v(" concatenates them. We then push "),a("code",[t._v("bool True")]),t._v(" to continue the execution of the loop which will end only when the list is empty.")]),t._v(" "),a("h2",{attrs:{id:"iterating-on-sets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterating-on-sets"}},[t._v("#")]),t._v(" Iterating on sets")]),t._v(" "),a("p",[t._v("As you remember from the previous chapter, sets are a store of values similar to lists with the major difference of containing only unique values. From the various types we will study in this chapter, sets will probably be the easiest ones to iterate. There is only one instruction available to iterate sets, the "),a("strong",[a("code",[t._v("ITER")])]),t._v(" instruction. It allows you to loop through a set and run some code at each iteration. Let's check an example to see how it works:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DEBUG")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("True")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("set")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("EMPTY_SET")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ITER")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("3")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("bool")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("True")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("UPDATE")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("1")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("2")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("3")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("storage (set int);\nparameter unit;\ncode { CDR ; EMPTY_SET int ; SWAP ; ITER { PUSH int 3 ; ADD ; PUSH bool True ; SWAP ; UPDATE } ; NIL operation ; PAIR };\nRUN: use %default; drop all; push (Unit, {1, 2, 3});\nCDR: pop (Unit, {1, 2, 3}); push {1, 2, 3};\nEMPTY_SET: push [];\nSWAP: pop [], {1, 2, 3}; push []; push {1, 2, 3};\nITER: pop {1, 2, 3}; push 1;\nPUSH: push 3;\nADD: pop 3, 1; push 4;\nPUSH: push True;\nSWAP: pop True, 4; push True; push 4;\nUPDATE: pop 4, True, []; push {4};\npush 2;\nPUSH: push 3;\nADD: pop 3, 2; push 5;\nPUSH: push True;\nSWAP: pop True, 5; push True; push 5;\nUPDATE: pop 5, True, {4}; push {4, 5};\npush 3;\nPUSH: push 3;\nADD: pop 3, 3; push 6;\nPUSH: push True;\nSWAP: pop True, 6; push True; push 6;\nUPDATE: pop 6, True, {4, 5}; push {4, 5, 6};\nNIL: push [];\nPAIR: pop [], {4, 5, 6}; push ([], {4, 5, 6});")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                             ")]),a("th",[t._v("type                                        ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("{ 6 ; 5 ; 4 }")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("set int")])])])])])]),t._v(" "),a("p",[t._v("As you can see, "),a("strong",[a("code",[t._v("ITER")])]),t._v(" goes through each element of the set, pushes it to the stack and runs the code provided between brackets. You can either make some calculations with the values and save them in a new set, in which case you have to create an empty set before calling "),a("strong",[a("code",[t._v("ITER")])]),t._v(" like we did in this example or you can "),a("em",[t._v("reduce")]),t._v(" the set, for example:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("set")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ITER")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("1")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("2")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("3")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("4")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("0")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("storage int;\nparameter (set int);\ncode { { DUP ; CAR ; DIP { CDR } } ; ITER { ADD } ; NIL operation ; PAIR };\nRUN: use %default; drop all; push ({1, 2, 3, 4, 5, 6}, 0);\nDUP: push ({1, 2, 3, 4, 5, 6}, 0);\nCAR: pop ({1, 2, 3, 4, 5, 6}, 0); push {1, 2, 3, 4, 5, 6};\nDIP: protect 1 item(s);\nCDR: pop ({1, 2, 3, 4, 5, 6}, 0); push 0;\nrestore 1 item(s);\nITER: pop {1, 2, 3, 4, 5, 6}; push 1;\nADD: pop 1, 0; push 1;\npush 2;\nADD: pop 2, 1; push 3;\npush 3;\nADD: pop 3, 3; push 6;\npush 4;\nADD: pop 4, 6; push 10;\npush 5;\nADD: pop 5, 10; push 15;\npush 6;\nADD: pop 6, 15; push 21;\nNIL: push [];\nPAIR: pop [], 21; push ([], 21);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("21")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("In this example, the initial storage set to "),a("code",[t._v("0")]),t._v(" works as an accumulator and each value in the set is added to the accumulator.")]),t._v(" "),a("h2",{attrs:{id:"iterating-on-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterating-on-maps"}},[t._v("#")]),t._v(" Iterating on maps")]),t._v(" "),a("p",[t._v("Like lists or sets, maps are a type a value that can be iterated, which means that it is possible to loop through all the key/value pairs, to have access to them or to modify them. Two different instructions exist in Michelson to loop through maps. The first one, "),a("strong",[a("code",[t._v("ITER")])]),t._v(", loops through the map and return a pair containing the element on the left and the value on the right:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("set")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("map")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("EMPTY_SET")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ITER")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("bool")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("True")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("UPDATE")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Elt")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"cherry"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"red"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Elt")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"banana"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"yellow"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Elt")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"apple"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"green"')]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("storage (set string);\nparameter (map string string);\ncode { CAR ; EMPTY_SET string ; SWAP ; ITER { CAR ; PUSH bool True ; SWAP ; UPDATE } ; NIL operation ; PAIR };\nRUN: use %default; drop all; push ({'cherry': 'red', 'banana': 'yellow', 'apple': 'green'}, set());\nCAR: pop ({'cherry': 'red', 'banana': 'yellow', 'apple': 'green'}, set()); push {'cherry': 'red', 'banana': 'yellow', 'apple': 'green'};\nEMPTY_SET: push [];\nSWAP: pop [], {'cherry': 'red', 'banana': 'yellow', 'apple': 'green'}; push []; push {'cherry': 'red', 'banana': 'yellow', 'apple': 'green'};\nITER: pop {'cherry': 'red', 'banana': 'yellow', 'apple': 'green'}; push ('cherry', 'red');\nCAR: pop ('cherry', 'red'); push cherry;\nPUSH: push True;\nSWAP: pop True, cherry; push True; push cherry;\nUPDATE: pop cherry, True, []; push {'cherry'};\npush ('banana', 'yellow');\nCAR: pop ('banana', 'yellow'); push banana;\nPUSH: push True;\nSWAP: pop True, banana; push True; push banana;\nUPDATE: pop banana, True, {'cherry'}; push {'cherry', 'banana'};\npush ('apple', 'green');\nCAR: pop ('apple', 'green'); push apple;\nPUSH: push True;\nSWAP: pop True, apple; push True; push apple;\nUPDATE: pop apple, True, {'cherry', 'banana'}; push {'cherry', 'banana', 'apple'};\nNIL: push [];\nPAIR: pop [], {'cherry', 'banana', 'apple'}; push ([], {'cherry', 'banana', 'apple'});")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                                 ")]),a("th",[t._v("type                                           ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('{ "apple" ; "banana" ; "cherry" }')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("set string")])])])])])]),t._v(" "),a("p",[t._v("This contract accepts a map of type "),a("code",[t._v("(map string string)")]),t._v(" and returns a set of type "),a("code",[t._v("(set string)")]),t._v(" with the names of the fruits. As you can see, "),a("strong",[a("code",[t._v("ITER")])]),t._v(" takes as a parameter a piece of code that will act on the pair of key/value pushed to the stack. The name of the fruit is extracted ("),a("strong",[a("code",[t._v("CAR")])]),t._v("), a value of type "),a("code",[t._v("bool")]),t._v(" is pushed onto the stack ("),a("strong",[a("code",[t._v("PUSH bool True")])]),t._v(") before being swapped ("),a("strong",[a("code",[t._v("SWAP")])]),t._v(") to be set in the order to update the the set of strings ("),a("strong",[a("code",[t._v("UPDATE")])]),t._v(").")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("ITER")])]),t._v(" is an instruction that allows you to get the keys and values out of the map and manipulate them. However, it doesn't affect the original map. If you want to change the values of a map in a deterministic way, you can use "),a("strong",[a("code",[t._v("MAP")])]),t._v(". Like "),a("strong",[a("code",[t._v("ITER")])]),t._v(", "),a("strong",[a("code",[t._v("MAP")])]),t._v(" loops through a map but its values will be modified by the code you write between curly braces. Here is an example:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("map")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("map")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("MAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Elt")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"cherry"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("16")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Elt")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"banana"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("24")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Elt")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"apple"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("32")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("storage (map string nat);\nparameter (map string nat);\ncode { CAR ; MAP { CDR ; PUSH nat 5 ; ADD } ; NIL operation ; PAIR };\nRUN: use %default; drop all; push ({'cherry': 16, 'banana': 24, 'apple': 32}, {});\nCAR: pop ({'cherry': 16, 'banana': 24, 'apple': 32}, {}); push {'cherry': 16, 'banana': 24, 'apple': 32};\nMAP: pop {'cherry': 16, 'banana': 24, 'apple': 32}; push ('cherry', 16);\nCDR: pop ('cherry', 16); push 16;\nPUSH: push 5;\nADD: pop 5, 16; push 21;\npop 21; push ('banana', 24);\nCDR: pop ('banana', 24); push 24;\nPUSH: push 5;\nADD: pop 5, 24; push 29;\npop 29; push ('apple', 32);\nCDR: pop ('apple', 32); push 32;\nPUSH: push 5;\nADD: pop 5, 32; push 37;\npop 37; push {'cherry': 21, 'banana': 29, 'apple': 37};\nNIL: push [];\nPAIR: pop [], {'cherry': 21, 'banana': 29, 'apple': 37}; push ([], {'cherry': 21, 'banana': 29, 'apple': 37});")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                                                      ")]),a("th",[t._v("type                                               ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('{ Elt "cherry" 21 ; Elt "banana" 29 ; Elt "apple" 37 }')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("map string nat")])])])])])]),t._v(" "),a("p",[t._v("This piece of code loops through the map and at every iteration, a pair containing the key on the left and the value on the right is pushed onto the stack. The value is extracted from the pair and "),a("code",[t._v("5")]),t._v(" is added to it. The difference with "),a("strong",[a("code",[t._v("ITER")])]),t._v(" is that the value remaining at the end is the one that will be saved back in the map as the new value for the current key. You can keep the same type for the values in the map or you can also change their type.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("Iterating on big maps is not possible from Michelson. The reason is that big maps are lazily deserialized to save on gas cost and the contract is not aware of all the key/value pairs in a big map as they are deserialized on demand one by one.")])]),t._v(" "),a("Binder",{attrs:{filepath:"notebooks/tutorials/11/11_iterating_collections.ipynb"}})],1)}),[],!1,null,null,null);s.default=o.exports}}]);