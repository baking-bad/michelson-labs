(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{383:function(t,s,a){"use strict";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"chapter-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-8"}},[t._v("#")]),t._v(" Chapter 8")]),t._v(" "),a("p",[t._v("Pairs are probably one of the most important type in your Michelson tool belt. Every contract starts with a pair, every contract ends with a pair. They are a fundamental component of Michelson contracts. A pair is the smallest type of value you can use to store multiple values: it can hold two values of different types. You can also "),a("em",[t._v("nest")]),t._v(" pairs: a pair can consist of a simple value and another pair or even two other pairs! This model allows nesting multiple pairs one into the other, like Russian dolls.")]),t._v(" "),a("p",[t._v("Along the previous lessons, we encountered a couple of instruction that act on pairs, namely "),a("strong",[a("code",[t._v("CAR")])]),t._v(" and "),a("strong",[a("code",[t._v("CDR")])]),t._v(". If you remember, these two opcodes extract the left side and the right side of the pair, respectively. There is also "),a("strong",[a("code",[t._v("PAIR")])]),t._v(" that creates a new pair with two provided values. But that's just the tip of the iceberg! There are other instructions you can use to create or manipulate pairs. By the end of this chapter, pairs will have no secret for you!")]),t._v(" "),a("h2",{attrs:{id:"overview-of-the-pair-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview-of-the-pair-type"}},[t._v("#")]),t._v(" Overview of the pair type")]),t._v(" "),a("p",[t._v("A pair is fundamentally a value that holds two other values. These two values can be of any type. In the documentation, you will find pair type written this way: "),a("code",[t._v("(pair type1 type2)")]),t._v(". The value of the pair is written this way: "),a("code",[t._v("(Pair value1 value2)")]),t._v(". Every smart contract written in Michelson starts and ends with a pair:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("7")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("0")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("0")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("storage (pair int int);\nparameter unit;\ncode { DROP ; PUSH int 6 ; PUSH int 7 ; PAIR ; NIL operation ; PAIR };\nRUN: use %default; drop all; push (Unit, (0, 0));\nDROP: pop (Unit, (0, 0));\nPUSH: push 6;\nPUSH: push 7;\nPAIR: pop 7, 6; push (7, 6);\nNIL: push [];\nPAIR: pop [], (7, 6); push ([], (7, 6));")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                        ")]),a("th",[t._v("type                                             ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Pair 7 6")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair int int")])])])])])]),t._v(" "),a("p",[t._v("You can choose the types you want in a pair, even other pairs:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("BEGIN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"hello"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("@first_pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("mutez")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5000")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("NOW")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("@second_pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("3")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"hello"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("mutez")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("45678")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("@third_pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("storage unit;\nparameter unit;\nBEGIN: use %default; drop all; push (Unit, Unit);\nDROP: pop (Unit, Unit);\nPUSH: push 5;\nPUSH: push hello;\nPAIR: pop hello, 5; push ('hello', 5);\nPUSH: push 5000;\nNOW: push 1593583442;\nPAIR: pop 1593583442, 5000; push (1593583442, 5000);\nPUSH: push (3, 'hello');\nPUSH: push (5, 45678);\nPAIR: pop (5, 45678), (3, 'hello'); push ((5, 45678), (3, 'hello'));")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                                    ")]),a("th",[t._v("type                                                                        ")]),a("th",[t._v("name                                             ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair (Pair 5 45678) (Pair 3 "hello")')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair (pair nat mutez) (pair int string)")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("@third_pair")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Pair 1593583442 5000")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair timestamp mutez")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("@second_pair")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair "hello" 5')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair string nat")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("@first_pair")])])])])])]),t._v(" "),a("h2",{attrs:{id:"operations-on-pairs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operations-on-pairs"}},[t._v("#")]),t._v(" Operations on pairs")]),t._v(" "),a("p",[t._v("A few instructions are available on pairs. The first one is an operation we have already been using since the beginning: "),a("strong",[a("code",[t._v("PAIR")])]),t._v(". "),a("strong",[a("code",[t._v("PAIR")])]),t._v(" allows you to take the two elements on top of the stack and put them in a "),a("code",[t._v("pair")]),t._v(". It goes without saying that "),a("strong",[a("code",[t._v("PAIR")])]),t._v(" only works if there are currently two elements on top of the stack. Unlike "),a("code",[t._v("list")]),t._v(", you don't have to specify the type of the two elements, the first element will be on the left side of the pair and the second element on the right side. The instruction was illustrated above.")]),t._v(" "),a("p",[t._v("Next come two other instructions that we have also been using for a while: "),a("strong",[a("code",[t._v("CAR")])]),t._v(" and "),a("strong",[a("code",[t._v("CDR")])]),t._v(". If you remember, "),a("strong",[a("code",[t._v("CAR")])]),t._v(" extracts the left side of a pair while "),a("strong",[a("code",[t._v("CDR")])]),t._v(" extracts the right side:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"tezos"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DUP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("@left_side")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("CDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("@right_side")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP_ALL: drop all;\nPUSH: push (5, 'tezos');\nDUP: push (5, 'tezos');\nCAR: pop (5, 'tezos'); push 5;\nSWAP: pop 5, (5, 'tezos'); push 5; push (5, 'tezos');\nCDR: pop (5, 'tezos'); push tezos;")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                       ")]),a("th",[t._v("type                                       ")]),a("th",[t._v("name                                            ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"tezos"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("@right_side")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("5")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("@left_side")])])])])])]),t._v(" "),a("p",[t._v("You should be familiar with their functioning now."),a("br"),t._v('\nIt is possible to "combine" these two instructions when working with nested pairs (i.e pairs inside pairs). If you have ever checked Michelson contracts, you probably noticed that nested pairs are pretty common. Let\'s observe the snippet below:')]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"hello"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"world"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("CADR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP_ALL: drop all;\nPUSH: push ((5, 6), ('hello', 'world'));\nCAR: pop ((5, 6), ('hello', 'world')); push (5, 6);\nCDR: pop (5, 6); push 6;")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                 ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("6")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])])])])])]),t._v(" "),a("p",[t._v("This is one long instruction! It created nested pairs: a root pair that contains two other pairs: on the left side, a pair with a "),a("code",[t._v("nat")]),t._v(" on the left and a "),a("code",[t._v("nat")]),t._v(" on the right, on the right side, a pair with a "),a("code",[t._v("string")]),t._v(" on the left and a "),a("code",[t._v("string")]),t._v(" on the right. As you can see from the result, the "),a("strong",[a("code",[t._v("CADR")])]),t._v(" instruction is equal to "),a("strong",[a("code",[t._v("CAR ; CDR ;")])]),t._v(", i.e it will extract the pair on the left side of a pair and then extract the right side of the nested pair. If you want to extract the left side of the nested pair, you can use "),a("strong",[a("code",[t._v("CAAR")])]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"hello"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"world"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("CAAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP_ALL: drop all;\nPUSH: push ((5, 6), ('hello', 'world'));\nCAR: pop ((5, 6), ('hello', 'world')); push (5, 6);\nCAR: pop (5, 6); push 5;")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                 ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("5")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])])])])])]),t._v(" "),a("p",[t._v("To work on the right side of the root pair, you can use "),a("strong",[a("code",[t._v("CDAR")])]),t._v(" (to extract its left side) or "),a("strong",[a("code",[t._v("CDDR")])]),t._v(" (to extract its right side):")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"hello"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"world"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DUP")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("CDAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("CDDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP_ALL: drop all;\nPUSH: push ((5, 6), ('hello', 'world'));\nDUP: push ((5, 6), ('hello', 'world'));\nCDR: pop ((5, 6), ('hello', 'world')); push ('hello', 'world');\nCAR: pop ('hello', 'world'); push hello;\nSWAP: pop hello, ((5, 6), ('hello', 'world')); push hello; push ((5, 6), ('hello', 'world'));\nCDR: pop ((5, 6), ('hello', 'world')); push ('hello', 'world');\nCDR: pop ('hello', 'world'); push world;")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                       ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"hello"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])])])])]),t._v(" "),a("p",[t._v("We can go even further and imagine a three-level nested pair. According to the level you are trying to reach, you can put more "),a("strong",[t._v("A")]),t._v("s or more "),a("strong",[t._v("D")]),t._v("s between "),a("strong",[t._v("C")]),t._v(" and "),a("strong",[t._v("R")]),t._v(" to access the value you want:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("10")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"hello"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"world"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("CDDDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP_ALL: drop all;\nPUSH: push ((5, 6), (10, ('hello', 'world')));\nCDR: pop ((5, 6), (10, ('hello', 'world'))); push (10, ('hello', 'world'));\nCDR: pop (10, ('hello', 'world')); push ('hello', 'world');\nCDR: pop ('hello', 'world'); push world;")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                       ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"world"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])])])])]),t._v(" "),a("p",[t._v("The instructions we've seen so far only extracts elements that already exist in pairs, but what about modifying elements of pairs? Imagine you have this pair: "),a("code",[t._v('(Pair "hello" "world")')]),t._v('. How would you go if you want to replace "world" with "Tezos"?')]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"Tezos"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"hello"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"world"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP: pop world;\nPUSH: push Tezos;\nPUSH: push ('hello', 'world');\nCAR: pop ('hello', 'world'); push hello;\nPAIR: pop hello, Tezos; push ('hello', 'Tezos');")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                    ")]),a("th",[t._v("type                                                   ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair "hello" "Tezos"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair string string")])])])])])]),t._v(" "),a("p",[t._v("This method involves multiple instructions to extract the value you want and pair it with a second value. Michelson provides a few useful macros that just do that. The first one we are going to check is "),a("strong",[a("code",[t._v("SET_CAR")])]),t._v(". "),a("strong",[a("code",[t._v("SET_CAR")])]),t._v(" will modify the left side of a pair. In order to use it, you must have two elements in your stack: a pair on top and the element to set on the left side below:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"three"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"two"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"birds"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("SET_CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP: pop ('hello', 'Tezos');\nPUSH: push three;\nPUSH: push ('two', 'birds');\nCDR: pop ('two', 'birds'); push birds;\nSWAP: pop birds, three; push birds; push three;\nPAIR: pop three, birds; push ('three', 'birds');")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                    ")]),a("th",[t._v("type                                                   ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair "three" "birds"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair string string")])])])])])]),t._v(" "),a("p",[t._v('You can see that the pair we pushed has been modified and the left side that was "two" is now "three". If you want to do the same thing on the right side, you can use '),a("strong",[a("code",[t._v("SET_CDR")])]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"cats"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token comment"},[t._v("## brings the pair on top of the element to include")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("SET_CDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("PUSH: push cats;\nSWAP: pop cats, ('three', 'birds'); push cats; push ('three', 'birds');\nCAR: pop ('three', 'birds'); push three;\nPAIR: pop three, cats; push ('three', 'cats');")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                   ")]),a("th",[t._v("type                                                   ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair "three" "cats"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair string string")])])])])])]),t._v(" "),a("p",[t._v('In this new example, "birds" has been replaced with "cats". Even better, you can use macros after '),a("code",[t._v("SET_")]),t._v(" if you want to access nested pairs like in the example above and set their elements:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"four"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"birds"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"five"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("SET_CDAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("PUSH: push ('four', 'birds');\nPAIR: pop ('four', 'birds'), ('three', 'cats'); push (('four', 'birds'), ('three', 'cats'));\nPUSH: push five;\nSWAP: pop five, (('four', 'birds'), ('three', 'cats')); push five; push (('four', 'birds'), ('three', 'cats'));\nDUP: push (('four', 'birds'), ('three', 'cats'));\nDIP: protect 1 item(s);\n  CDR: pop (('four', 'birds'), ('three', 'cats')); push ('three', 'cats');\n  CDR: pop ('three', 'cats'); push cats;\n  SWAP: pop cats, five; push cats; push five;\n  PAIR: pop five, cats; push ('five', 'cats');\n  restore 1 item(s);\nCAR: pop (('four', 'birds'), ('three', 'cats')); push ('four', 'birds');\nPAIR: pop ('four', 'birds'), ('five', 'cats'); push (('four', 'birds'), ('five', 'cats'));")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                                               ")]),a("th",[t._v("type                                                                               ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair (Pair "four" "birds") (Pair "five" "cats")')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair (pair string string) (pair string string)")])])])])])]),t._v(" "),a("p",[t._v("As expected with the "),a("strong",[a("code",[t._v("CDAR")])]),t._v(" macro, we access first the right side of the pair (the "),a("strong",[t._v("D")]),t._v(" in "),a("strong",[a("code",[t._v("CDAR")])]),t._v(") then the left side (the "),a("strong",[t._v("A")]),t._v(" in "),a("strong",[a("code",[t._v("CDAR")])]),t._v(") that we replace with the string we pushed earlier.")]),t._v(" "),a("p",[t._v("Now your brain must have warmed up and be ready to go down the rabbithole of pairs in Michelson! So far, we've seen how to set data in a pair, how to extract it and how to swap one value with another one. What about running some code on the data in a pair? 🤯")]),t._v(" "),a("p",[t._v("Imagine a pair containing two numbers. How would you proceed if you want to increment the number on the left?")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("10")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DUP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("CDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DIP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP: pop (('four', 'birds'), ('five', 'cats'));\nPUSH: push (10, 5);\nDUP: push (10, 5);\nCDR: pop (10, 5); push 5;\nDIP: protect 1 item(s);\n  CAR: pop (10, 5); push 10;\n  PUSH: push 5;\n  ADD: pop 5, 10; push 15;\n  restore 1 item(s);\nSWAP: pop 5, 15; push 5; push 15;\nPAIR: pop 15, 5; push (15, 5);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                         ")]),a("th",[t._v("type                                             ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Pair 15 5")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair int int")])])])])])]),t._v(" "),a("p",[t._v("Multiple steps are involved here to add "),a("code",[t._v("5")]),t._v(" to the "),a("code",[t._v("10")]),t._v(" on the left side of the pair:")]),t._v(" "),a("ol",[a("li",[t._v("We duplicate the pair as we will need access to both the left field and the right field")]),t._v(" "),a("li",[t._v("We extract the value on the right side of the pair.")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("DIP")])]),t._v(" protects the value on top of the stack and run the following code on the second element: extract the value on the left side, push "),a("code",[t._v("5")]),t._v(" and add "),a("code",[t._v("5")]),t._v(" to the value that was on the left side of the pair.")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("SWAP")])]),t._v(" puts the two values in the initial order")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("PAIR")])]),t._v(" creates a new pair")])]),t._v(" "),a("p",[t._v("As you can imagine, these are a lot of steps involved in modifying a single value. Fortunately, Michelson provides a very useful macro that will run this code for you under the hood: "),a("strong",[a("code",[t._v("MAP_CAR")])]),t._v(". Let's take the same example and use this macro instead:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("10")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("MAP_CAR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP: pop (15, 5);\nPUSH: push (10, 5);\nDUP: push (10, 5);\nCDR: pop (10, 5); push 5;\nDIP: protect 1 item(s);\n  CAR: pop (10, 5); push 10;\n  PUSH: push 5;\n  ADD: pop 5, 10; push 15;\n  restore 1 item(s);\nSWAP: pop 5, 15; push 5; push 15;\nPAIR: pop 15, 5; push (15, 5);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                         ")]),a("th",[t._v("type                                             ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Pair 15 5")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair int int")])])])])])]),t._v(" "),a("p",[t._v("You have to admit, that's a lot simpler than the first solution! With "),a("strong",[a("code",[t._v("MAP_CAR")])]),t._v(", you only need to provide the code you want to run on the left field of the pair and the macro will do the rest for you.")]),t._v(" "),a("p",[t._v("As you may have guessed, we also have "),a("strong",[a("code",[t._v("MAP_CDR")])]),t._v(" to run code on the right side of the pair:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("20")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("3")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("MAP_CDR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SUB")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP: pop -2;\nPUSH: push (20, 3);\nDUP: push (20, 3);\nCDR: pop (20, 3); push 3;\nPUSH: push 6;\nSWAP: pop 6, 3; push 6; push 3;\nSUB: pop 3, 6; push -3;\nSWAP: pop -3, (20, 3); push -3; push (20, 3);\nCAR: pop (20, 3); push 20;\nPAIR: pop 20, -3; push (20, -3);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                          ")]),a("th",[t._v("type                                             ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Pair 20 -3")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair nat int")])])])])])]),t._v(" "),a("p",[t._v("Just like the "),a("strong",[a("code",[t._v("SET_")])]),t._v(", you can modify the right side of the "),a("strong",[a("code",[t._v("MAP_")])]),t._v(" to access nested pairs. Let's see an example:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"birds"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"cats"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"dogs"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"cows"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("MAP_CADR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('" and butterflies"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("SWAP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("CONCAT")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP: pop (20, -3);\nPUSH: push (('birds', 'cats'), ('dogs', 'cows'));\nDUP: push (('birds', 'cats'), ('dogs', 'cows'));\nDIP: protect 1 item(s);\n  CAR: pop (('birds', 'cats'), ('dogs', 'cows')); push ('birds', 'cats');\n  DUP: push ('birds', 'cats');\n  CDR: pop ('birds', 'cats'); push cats;\n  PUSH: push  and butterflies;\n  SWAP: pop  and butterflies, cats; push  and butterflies; push cats;\n  CONCAT: pop cats; pop  and butterflies; push cats and butterflies;\n  SWAP: pop cats and butterflies, ('birds', 'cats'); push cats and butterflies; push ('birds', 'cats');\n  CAR: pop ('birds', 'cats'); push birds;\n  PAIR: pop birds, cats and butterflies; push ('birds', 'cats and butterflies');\n  restore 1 item(s);\nCDR: pop (('birds', 'cats'), ('dogs', 'cows')); push ('dogs', 'cows');\nSWAP: pop ('dogs', 'cows'), ('birds', 'cats and butterflies'); push ('dogs', 'cows'); push ('birds', 'cats and butterflies');\nPAIR: pop ('birds', 'cats and butterflies'), ('dogs', 'cows'); push (('birds', 'cats and butterflies'), ('dogs', 'cows'));")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                                                               ")]),a("th",[t._v("type                                                                               ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('Pair (Pair "birds" "cats and butterflies") (Pair "dogs" "cows")')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair (pair string string) (pair string string)")])])])])])]),t._v(" "),a("h2",{attrs:{id:"pairing-and-unpairing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pairing-and-unpairing"}},[t._v("#")]),t._v(" Pairing and unpairing")]),t._v(" "),a("p",[t._v("So far, the instructions we have seen only allow us to work on one element of a pair at a time. In some situations, you may want to put some elements of the stack in a pair or remove the elements of a pair to push them on the stack. In the simplest cases, you have two elements that you want to pair together. You can use the "),a("strong",[a("code",[t._v("PAIR")])]),t._v(" instruction to construct a pair:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("BEGIN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("Unit")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("DROP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("mutez")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5559988")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("storage unit;\nparameter unit;\nBEGIN: use %default; drop all; push (Unit, Unit);\nDROP: pop (Unit, Unit);\nPUSH: push 6;\nPUSH: push 5559988;\nPAIR: pop 5559988, 6; push (5559988, 6);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                              ")]),a("th",[t._v("type                                               ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Pair 5559988 6")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair mutez int")])])])])])]),t._v(" "),a("p",[t._v("You can easily deconstruct the pair and get the two elements it contains onto the stack with the "),a("strong",[a("code",[t._v("UNPAIR")])]),t._v(" instruction:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DUP: push (5559988, 6);\nCAR: pop (5559988, 6); push 5559988;\nDIP: protect 1 item(s);\n  CDR: pop (5559988, 6); push 6;\n  restore 1 item(s);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                       ")]),a("th",[t._v("type                                      ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("5559988")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("mutez")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("6")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("Under the hood, "),a("strong",[a("code",[t._v("UNPAIR")])]),t._v(" is just syntactic sugar for "),a("strong",[a("code",[t._v("DUP ; CAR ; DIP { CDR } ;")])]),t._v(" and you can observe that the element that was on the left side of the pair is now on top and the element from the right side just below.")]),t._v(" "),a("p",[t._v("Now, what would happen with nested pairs? If we have two pairs in the stack and we want to pair them, we can just use "),a("strong",[a("code",[t._v("PAIR")])]),t._v(" as usual. It becomes more complicated if we have 4 elements in the stack and want to create an element of type "),a("code",[t._v("(pair (pair type type) (pair type type))")]),t._v(". Of course, we could type a few instructions to get this result (for example "),a("strong",[a("code",[t._v("PAIR ; DIP { PAIR } ; PAIR ;")])]),t._v(" but Michelson actually offers us a much simpler and elegant solution: "),a("em",[t._v("pair macros")]),t._v(". Let's have a look at an example:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("8")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("12")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("19")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("PPAIPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP_ALL: drop all;\nPUSH: push 6;\nPUSH: push 8;\nPUSH: push 12;\nPUSH: push 19;\nDIP: protect 2 item(s);\n  PAIR: pop 8, 6; push (8, 6);\n  restore 2 item(s);\nPAIR: pop 19, 12; push (19, 12);\nPAIR: pop (19, 12), (8, 6); push ((19, 12), (8, 6));")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                            ")]),a("th",[t._v("type                                                                   ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Pair (Pair 19 12) (Pair 8 6)")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair (pair nat nat) (pair int int)")])])])])])]),t._v(" "),a("p",[t._v("Although "),a("strong",[a("code",[t._v("PPAIPAIR")])]),t._v(" looks like my cat walked on my keyboard, it is much easier than concatenating 4 instructions together! This is a very powerful macro that looks intimidating the first time you see it but becomes very easy to use once you understand its mechanism. There are only three rules to remember:")]),t._v(" "),a("ol",[a("li",[t._v("The macro starts with "),a("code",[t._v("P")]),t._v(" and ends with "),a("code",[t._v("R")]),t._v(".")]),t._v(" "),a("li",[t._v("A "),a("code",[t._v("P")]),t._v(" inside the macro indicates a new pair.")]),t._v(" "),a("li",[a("code",[t._v("A")]),t._v(" represents the left side of the macro while "),a("code",[t._v("I")]),t._v(" represents the right side.")])]),t._v(" "),a("p",[t._v("This is how you can read the macro: this is a pair ("),a("strong",[t._v("P")]),t._v("PAIPAI"),a("strong",[t._v("R")]),t._v("), on the left side of the pair, there is a pair (P"),a("strong",[t._v("P")]),t._v("AIPAIR) whose elements are not pairs (PP"),a("strong",[t._v("AI")]),t._v("PAIR), on the right side, there is another pair (PPAI"),a("strong",[t._v("P")]),t._v("AIR) whose elements are not pairs (PPAIP"),a("strong",[t._v("AI")]),t._v("R).")]),t._v(" "),a("p",[t._v("Let's see two more examples:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("8")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("12")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("19")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("PAPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token comment"},[t._v("## A pair with a value on the left side and a pair on the right side")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP_ALL: drop all;\nPUSH: push 6;\nPUSH: push 8;\nPUSH: push 12;\nPUSH: push 19;\nDIP: protect 1 item(s);\n  PAIR: pop 12, 8; push (12, 8);\n  restore 1 item(s);\nPAIR: pop 19, (12, 8); push (19, (12, 8));")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                   ")]),a("th",[t._v("type                                                        ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Pair 19 (Pair 12 8)")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair nat (pair nat int)")])])])])])]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("DROP_ALL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("6")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("8")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("12")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("19")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("nat")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("25")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token variable"},[t._v("PAPPAIPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token comment"},[t._v("## A pair with a value on the left and a pair with 2 nested pairs on the right")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DROP_ALL: drop all;\nPUSH: push 6;\nPUSH: push 8;\nPUSH: push 12;\nPUSH: push 19;\nPUSH: push 25;\nDIP: protect 3 item(s);\n  PAIR: pop 8, 6; push (8, 6);\n  restore 3 item(s);\nDIP: protect 1 item(s);\n  PAIR: pop 19, 12; push (19, 12);\n  restore 1 item(s);\nDIP: protect 1 item(s);\n  PAIR: pop (19, 12), (8, 6); push ((19, 12), (8, 6));\n  restore 1 item(s);\nPAIR: pop 25, ((19, 12), (8, 6)); push (25, ((19, 12), (8, 6)));")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                                                      ")]),a("th",[t._v("type                                                                              ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("Pair 25 (Pair (Pair 19 12) (Pair 8 6))")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("pair nat (pair (pair nat nat) (pair int int))")])])])])])]),t._v(" "),a("p",[t._v("Now that you understood the principle of the macro, it is very easy to unpair nested pairs. You can follow the same mechanism to deconstruct pairs by prefixing the macro with "),a("strong",[a("code",[t._v("UN")])]),t._v(". For example, let's deconstruct the pair we just created above:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token variable"},[t._v("UNPAPPAIPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("DUMP")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("DUP: push (25, ((19, 12), (8, 6)));\nCAR: pop (25, ((19, 12), (8, 6))); push 25;\nDIP: protect 1 item(s);\n  CDR: pop (25, ((19, 12), (8, 6))); push ((19, 12), (8, 6));\n  restore 1 item(s);\nDIP: protect 1 item(s);\n  DUP: push ((19, 12), (8, 6));\n  CAR: pop ((19, 12), (8, 6)); push (19, 12);\n  DIP: protect 1 item(s);\n    CDR: pop ((19, 12), (8, 6)); push (8, 6);\n    restore 1 item(s);\n  restore 1 item(s);\nDIP: protect 1 item(s);\n  DUP: push (19, 12);\n  CAR: pop (19, 12); push 19;\n  DIP: protect 1 item(s);\n    CDR: pop (19, 12); push 12;\n    restore 1 item(s);\n  restore 1 item(s);\nDIP: protect 3 item(s);\n  DUP: push (8, 6);\n  CAR: pop (8, 6); push 8;\n  DIP: protect 1 item(s);\n    CDR: pop (8, 6); push 6;\n    restore 1 item(s);\n  restore 3 item(s);")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                  ")]),a("th",[t._v("type                                    ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("25")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("19")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("12")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("nat")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("8")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])]),t._v(" "),a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("6")])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("int")])])])])])]),t._v(" "),a("p",[t._v("As you can see, we are left with a stack that's exactly the same as it was before we paired all the values together! This macro is going to be vital to deconstruct parameters passed to the contract. Imagine the following contract:")]),t._v(" "),a("div",{staticClass:"language-Michelson extra-class"},[a("pre",{staticClass:"language-Michelson"},[a("code",{staticClass:"language-Michelson"},[a("span",{staticClass:"token keyword"},[t._v("storage")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("parameter")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token class-name"},[t._v("pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("code")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("UNPPAIIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("ADD")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("int")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("10")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token variable"},[t._v("IFCMPEQ")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("NIL")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("operation")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PAIR")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("{")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("PUSH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token class-name"},[t._v("string")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"Not equal to 10!"')]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token operator"},[t._v("FAILWITH")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("}")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token punctuation"},[t._v("\n")]),a("span",{staticClass:"token keyword"},[t._v("RUN")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token attr-name"},[t._v("%default")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token punctuation"},[t._v("(")]),a("span",{staticClass:"token number"},[t._v("Pair")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v("5")]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('"hello Tezos"')]),a("span",{staticClass:"token punctuation"},[t._v(")")]),a("span",{staticClass:"token punctuation"},[t._v(" ")]),a("span",{staticClass:"token number"},[t._v('""')]),a("span",{staticClass:"token punctuation"},[t._v(";")]),a("span",{staticClass:"token punctuation"},[t._v("\n")])])])]),a("div",{staticClass:"stdout"},[a("pre",[a("span",{staticClass:"stream-name"},[t._v("stdout")]),a("br"),t._v("storage string;\nparameter (pair (pair int int) string);\ncode { { DUP ; CAR ; DIP { CDR } } ; { { DUP ; CAR ; DIP { CDR } } ; { DUP ; CAR ; DIP { CDR } } } ; ADD ; PUSH int 10 ; { { COMPARE ; EQ } ; IF { NIL operation ; PAIR } { PUSH string \"Not equal to 10!\" ; FAILWITH } } };\nRUN: use %default; drop all; push (((5, 5), 'hello Tezos'), '');\nDUP: push (((5, 5), 'hello Tezos'), '');\nCAR: pop (((5, 5), 'hello Tezos'), ''); push ((5, 5), 'hello Tezos');\nDIP: protect 1 item(s);\nCDR: pop (((5, 5), 'hello Tezos'), ''); push ;\nrestore 1 item(s);\nDUP: push ((5, 5), 'hello Tezos');\nCAR: pop ((5, 5), 'hello Tezos'); push (5, 5);\nDIP: protect 1 item(s);\nCDR: pop ((5, 5), 'hello Tezos'); push hello Tezos;\nrestore 1 item(s);\nDUP: push (5, 5);\nCAR: pop (5, 5); push 5;\nDIP: protect 1 item(s);\nCDR: pop (5, 5); push 5;\nrestore 1 item(s);\nADD: pop 5, 5; push 10;\nPUSH: push 10;\nCOMPARE: pop 10, 10; push 0;\nEQ: pop 0; push True;\nIF: pop True;\nNIL: push [];\nPAIR: pop [], hello Tezos; push ([], 'hello Tezos');")])]),t._v(" "),a("div",{staticClass:"embedded-html"},[a("table",[a("thead",[a("tr",[a("th",[t._v("value                                             ")]),a("th",[t._v("type                                       ")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v('"hello Tezos"')])]),a("td",[a("pre",{staticStyle:{"text-align":"left"}},[t._v("string")])])])])])]),t._v(" "),a("p",[t._v("In a first step, "),a("strong",[a("code",[t._v("UNPAIR")])]),t._v(" extracts the parameter and the storage values from the pair that's pushed onto the stack at the beginning of the execution. Next, "),a("strong",[a("code",[t._v("UNPPAIIR")])]),t._v(" unwraps the parameter and gets all its values onto the stack. The two integers that the pair on the left side contained are added together and their result is compared to "),a("code",[t._v("10")]),t._v(". If it is equal, the string that was on the right side of the pair is saved in the storage. Otherwise, the contract fails.")]),t._v(" "),a("Binder",{attrs:{filepath:"notebooks/tutorials/08/08_working_with_pairs.ipynb"}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);